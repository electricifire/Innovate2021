// cpu_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module cpu_mm_interconnect_0 (
		input  wire [11:0] hps_0_h2f_lw_axi_master_awid,                                        //                                       hps_0_h2f_lw_axi_master.awid
		input  wire [20:0] hps_0_h2f_lw_axi_master_awaddr,                                      //                                                              .awaddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awlen,                                       //                                                              .awlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awsize,                                      //                                                              .awsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awburst,                                     //                                                              .awburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awlock,                                      //                                                              .awlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awcache,                                     //                                                              .awcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awprot,                                      //                                                              .awprot
		input  wire        hps_0_h2f_lw_axi_master_awvalid,                                     //                                                              .awvalid
		output wire        hps_0_h2f_lw_axi_master_awready,                                     //                                                              .awready
		input  wire [11:0] hps_0_h2f_lw_axi_master_wid,                                         //                                                              .wid
		input  wire [31:0] hps_0_h2f_lw_axi_master_wdata,                                       //                                                              .wdata
		input  wire [3:0]  hps_0_h2f_lw_axi_master_wstrb,                                       //                                                              .wstrb
		input  wire        hps_0_h2f_lw_axi_master_wlast,                                       //                                                              .wlast
		input  wire        hps_0_h2f_lw_axi_master_wvalid,                                      //                                                              .wvalid
		output wire        hps_0_h2f_lw_axi_master_wready,                                      //                                                              .wready
		output wire [11:0] hps_0_h2f_lw_axi_master_bid,                                         //                                                              .bid
		output wire [1:0]  hps_0_h2f_lw_axi_master_bresp,                                       //                                                              .bresp
		output wire        hps_0_h2f_lw_axi_master_bvalid,                                      //                                                              .bvalid
		input  wire        hps_0_h2f_lw_axi_master_bready,                                      //                                                              .bready
		input  wire [11:0] hps_0_h2f_lw_axi_master_arid,                                        //                                                              .arid
		input  wire [20:0] hps_0_h2f_lw_axi_master_araddr,                                      //                                                              .araddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arlen,                                       //                                                              .arlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arsize,                                      //                                                              .arsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arburst,                                     //                                                              .arburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arlock,                                      //                                                              .arlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arcache,                                     //                                                              .arcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arprot,                                      //                                                              .arprot
		input  wire        hps_0_h2f_lw_axi_master_arvalid,                                     //                                                              .arvalid
		output wire        hps_0_h2f_lw_axi_master_arready,                                     //                                                              .arready
		output wire [11:0] hps_0_h2f_lw_axi_master_rid,                                         //                                                              .rid
		output wire [31:0] hps_0_h2f_lw_axi_master_rdata,                                       //                                                              .rdata
		output wire [1:0]  hps_0_h2f_lw_axi_master_rresp,                                       //                                                              .rresp
		output wire        hps_0_h2f_lw_axi_master_rlast,                                       //                                                              .rlast
		output wire        hps_0_h2f_lw_axi_master_rvalid,                                      //                                                              .rvalid
		input  wire        hps_0_h2f_lw_axi_master_rready,                                      //                                                              .rready
		input  wire        clk_50_clk_clk,                                                      //                                                    clk_50_clk.clk
		input  wire        hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        sw_reset_reset_bridge_in_reset_reset,                                //                                sw_reset_reset_bridge_in_reset.reset
		output wire [1:0]  BAcurrent_s1_address,                                                //                                                  BAcurrent_s1.address
		input  wire [31:0] BAcurrent_s1_readdata,                                               //                                                              .readdata
		output wire [1:0]  BAvoltage_s1_address,                                                //                                                  BAvoltage_s1.address
		input  wire [31:0] BAvoltage_s1_readdata,                                               //                                                              .readdata
		output wire [1:0]  led_s1_address,                                                      //                                                        led_s1.address
		output wire        led_s1_write,                                                        //                                                              .write
		input  wire [31:0] led_s1_readdata,                                                     //                                                              .readdata
		output wire [31:0] led_s1_writedata,                                                    //                                                              .writedata
		output wire        led_s1_chipselect,                                                   //                                                              .chipselect
		output wire [1:0]  phase_s1_address,                                                    //                                                      phase_s1.address
		output wire        phase_s1_write,                                                      //                                                              .write
		input  wire [31:0] phase_s1_readdata,                                                   //                                                              .readdata
		output wire [31:0] phase_s1_writedata,                                                  //                                                              .writedata
		output wire        phase_s1_chipselect,                                                 //                                                              .chipselect
		output wire [1:0]  PVcurrent_s1_address,                                                //                                                  PVcurrent_s1.address
		input  wire [31:0] PVcurrent_s1_readdata,                                               //                                                              .readdata
		output wire [1:0]  PVvoltage_s1_address,                                                //                                                  PVvoltage_s1.address
		input  wire [31:0] PVvoltage_s1_readdata,                                               //                                                              .readdata
		output wire [1:0]  sw_s1_address,                                                       //                                                         sw_s1.address
		input  wire [31:0] sw_s1_readdata,                                                      //                                                              .readdata
		output wire [1:0]  VGR_current_s1_address,                                              //                                                VGR_current_s1.address
		input  wire [31:0] VGR_current_s1_readdata,                                             //                                                              .readdata
		output wire [1:0]  VGR_voltage_s1_address,                                              //                                                VGR_voltage_s1.address
		input  wire [31:0] VGR_voltage_s1_readdata,                                             //                                                              .readdata
		output wire [1:0]  VGS_current_s1_address,                                              //                                                VGS_current_s1.address
		input  wire [31:0] VGS_current_s1_readdata,                                             //                                                              .readdata
		output wire [1:0]  VGS_voltage_s1_address,                                              //                                                VGS_voltage_s1.address
		input  wire [31:0] VGS_voltage_s1_readdata,                                             //                                                              .readdata
		output wire [1:0]  VGT_current_s1_address,                                              //                                                VGT_current_s1.address
		input  wire [31:0] VGT_current_s1_readdata,                                             //                                                              .readdata
		output wire [1:0]  VGT_voltage_s1_address,                                              //                                                VGT_voltage_s1.address
		input  wire [31:0] VGT_voltage_s1_readdata                                              //                                                              .readdata
	);

	wire   [31:0] sw_s1_agent_m0_readdata;                                  // sw_s1_translator:uav_readdata -> sw_s1_agent:m0_readdata
	wire          sw_s1_agent_m0_waitrequest;                               // sw_s1_translator:uav_waitrequest -> sw_s1_agent:m0_waitrequest
	wire          sw_s1_agent_m0_debugaccess;                               // sw_s1_agent:m0_debugaccess -> sw_s1_translator:uav_debugaccess
	wire   [20:0] sw_s1_agent_m0_address;                                   // sw_s1_agent:m0_address -> sw_s1_translator:uav_address
	wire    [3:0] sw_s1_agent_m0_byteenable;                                // sw_s1_agent:m0_byteenable -> sw_s1_translator:uav_byteenable
	wire          sw_s1_agent_m0_read;                                      // sw_s1_agent:m0_read -> sw_s1_translator:uav_read
	wire          sw_s1_agent_m0_readdatavalid;                             // sw_s1_translator:uav_readdatavalid -> sw_s1_agent:m0_readdatavalid
	wire          sw_s1_agent_m0_lock;                                      // sw_s1_agent:m0_lock -> sw_s1_translator:uav_lock
	wire   [31:0] sw_s1_agent_m0_writedata;                                 // sw_s1_agent:m0_writedata -> sw_s1_translator:uav_writedata
	wire          sw_s1_agent_m0_write;                                     // sw_s1_agent:m0_write -> sw_s1_translator:uav_write
	wire    [2:0] sw_s1_agent_m0_burstcount;                                // sw_s1_agent:m0_burstcount -> sw_s1_translator:uav_burstcount
	wire          sw_s1_agent_rf_source_valid;                              // sw_s1_agent:rf_source_valid -> sw_s1_agent_rsp_fifo:in_valid
	wire  [118:0] sw_s1_agent_rf_source_data;                               // sw_s1_agent:rf_source_data -> sw_s1_agent_rsp_fifo:in_data
	wire          sw_s1_agent_rf_source_ready;                              // sw_s1_agent_rsp_fifo:in_ready -> sw_s1_agent:rf_source_ready
	wire          sw_s1_agent_rf_source_startofpacket;                      // sw_s1_agent:rf_source_startofpacket -> sw_s1_agent_rsp_fifo:in_startofpacket
	wire          sw_s1_agent_rf_source_endofpacket;                        // sw_s1_agent:rf_source_endofpacket -> sw_s1_agent_rsp_fifo:in_endofpacket
	wire          sw_s1_agent_rsp_fifo_out_valid;                           // sw_s1_agent_rsp_fifo:out_valid -> sw_s1_agent:rf_sink_valid
	wire  [118:0] sw_s1_agent_rsp_fifo_out_data;                            // sw_s1_agent_rsp_fifo:out_data -> sw_s1_agent:rf_sink_data
	wire          sw_s1_agent_rsp_fifo_out_ready;                           // sw_s1_agent:rf_sink_ready -> sw_s1_agent_rsp_fifo:out_ready
	wire          sw_s1_agent_rsp_fifo_out_startofpacket;                   // sw_s1_agent_rsp_fifo:out_startofpacket -> sw_s1_agent:rf_sink_startofpacket
	wire          sw_s1_agent_rsp_fifo_out_endofpacket;                     // sw_s1_agent_rsp_fifo:out_endofpacket -> sw_s1_agent:rf_sink_endofpacket
	wire          sw_s1_agent_rdata_fifo_src_valid;                         // sw_s1_agent:rdata_fifo_src_valid -> sw_s1_agent_rdata_fifo:in_valid
	wire   [33:0] sw_s1_agent_rdata_fifo_src_data;                          // sw_s1_agent:rdata_fifo_src_data -> sw_s1_agent_rdata_fifo:in_data
	wire          sw_s1_agent_rdata_fifo_src_ready;                         // sw_s1_agent_rdata_fifo:in_ready -> sw_s1_agent:rdata_fifo_src_ready
	wire   [31:0] led_s1_agent_m0_readdata;                                 // led_s1_translator:uav_readdata -> led_s1_agent:m0_readdata
	wire          led_s1_agent_m0_waitrequest;                              // led_s1_translator:uav_waitrequest -> led_s1_agent:m0_waitrequest
	wire          led_s1_agent_m0_debugaccess;                              // led_s1_agent:m0_debugaccess -> led_s1_translator:uav_debugaccess
	wire   [20:0] led_s1_agent_m0_address;                                  // led_s1_agent:m0_address -> led_s1_translator:uav_address
	wire    [3:0] led_s1_agent_m0_byteenable;                               // led_s1_agent:m0_byteenable -> led_s1_translator:uav_byteenable
	wire          led_s1_agent_m0_read;                                     // led_s1_agent:m0_read -> led_s1_translator:uav_read
	wire          led_s1_agent_m0_readdatavalid;                            // led_s1_translator:uav_readdatavalid -> led_s1_agent:m0_readdatavalid
	wire          led_s1_agent_m0_lock;                                     // led_s1_agent:m0_lock -> led_s1_translator:uav_lock
	wire   [31:0] led_s1_agent_m0_writedata;                                // led_s1_agent:m0_writedata -> led_s1_translator:uav_writedata
	wire          led_s1_agent_m0_write;                                    // led_s1_agent:m0_write -> led_s1_translator:uav_write
	wire    [2:0] led_s1_agent_m0_burstcount;                               // led_s1_agent:m0_burstcount -> led_s1_translator:uav_burstcount
	wire          led_s1_agent_rf_source_valid;                             // led_s1_agent:rf_source_valid -> led_s1_agent_rsp_fifo:in_valid
	wire  [118:0] led_s1_agent_rf_source_data;                              // led_s1_agent:rf_source_data -> led_s1_agent_rsp_fifo:in_data
	wire          led_s1_agent_rf_source_ready;                             // led_s1_agent_rsp_fifo:in_ready -> led_s1_agent:rf_source_ready
	wire          led_s1_agent_rf_source_startofpacket;                     // led_s1_agent:rf_source_startofpacket -> led_s1_agent_rsp_fifo:in_startofpacket
	wire          led_s1_agent_rf_source_endofpacket;                       // led_s1_agent:rf_source_endofpacket -> led_s1_agent_rsp_fifo:in_endofpacket
	wire          led_s1_agent_rsp_fifo_out_valid;                          // led_s1_agent_rsp_fifo:out_valid -> led_s1_agent:rf_sink_valid
	wire  [118:0] led_s1_agent_rsp_fifo_out_data;                           // led_s1_agent_rsp_fifo:out_data -> led_s1_agent:rf_sink_data
	wire          led_s1_agent_rsp_fifo_out_ready;                          // led_s1_agent:rf_sink_ready -> led_s1_agent_rsp_fifo:out_ready
	wire          led_s1_agent_rsp_fifo_out_startofpacket;                  // led_s1_agent_rsp_fifo:out_startofpacket -> led_s1_agent:rf_sink_startofpacket
	wire          led_s1_agent_rsp_fifo_out_endofpacket;                    // led_s1_agent_rsp_fifo:out_endofpacket -> led_s1_agent:rf_sink_endofpacket
	wire          led_s1_agent_rdata_fifo_src_valid;                        // led_s1_agent:rdata_fifo_src_valid -> led_s1_agent_rdata_fifo:in_valid
	wire   [33:0] led_s1_agent_rdata_fifo_src_data;                         // led_s1_agent:rdata_fifo_src_data -> led_s1_agent_rdata_fifo:in_data
	wire          led_s1_agent_rdata_fifo_src_ready;                        // led_s1_agent_rdata_fifo:in_ready -> led_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pvcurrent_s1_agent_m0_readdata;                           // PVcurrent_s1_translator:uav_readdata -> PVcurrent_s1_agent:m0_readdata
	wire          pvcurrent_s1_agent_m0_waitrequest;                        // PVcurrent_s1_translator:uav_waitrequest -> PVcurrent_s1_agent:m0_waitrequest
	wire          pvcurrent_s1_agent_m0_debugaccess;                        // PVcurrent_s1_agent:m0_debugaccess -> PVcurrent_s1_translator:uav_debugaccess
	wire   [20:0] pvcurrent_s1_agent_m0_address;                            // PVcurrent_s1_agent:m0_address -> PVcurrent_s1_translator:uav_address
	wire    [3:0] pvcurrent_s1_agent_m0_byteenable;                         // PVcurrent_s1_agent:m0_byteenable -> PVcurrent_s1_translator:uav_byteenable
	wire          pvcurrent_s1_agent_m0_read;                               // PVcurrent_s1_agent:m0_read -> PVcurrent_s1_translator:uav_read
	wire          pvcurrent_s1_agent_m0_readdatavalid;                      // PVcurrent_s1_translator:uav_readdatavalid -> PVcurrent_s1_agent:m0_readdatavalid
	wire          pvcurrent_s1_agent_m0_lock;                               // PVcurrent_s1_agent:m0_lock -> PVcurrent_s1_translator:uav_lock
	wire   [31:0] pvcurrent_s1_agent_m0_writedata;                          // PVcurrent_s1_agent:m0_writedata -> PVcurrent_s1_translator:uav_writedata
	wire          pvcurrent_s1_agent_m0_write;                              // PVcurrent_s1_agent:m0_write -> PVcurrent_s1_translator:uav_write
	wire    [2:0] pvcurrent_s1_agent_m0_burstcount;                         // PVcurrent_s1_agent:m0_burstcount -> PVcurrent_s1_translator:uav_burstcount
	wire          pvcurrent_s1_agent_rf_source_valid;                       // PVcurrent_s1_agent:rf_source_valid -> PVcurrent_s1_agent_rsp_fifo:in_valid
	wire  [118:0] pvcurrent_s1_agent_rf_source_data;                        // PVcurrent_s1_agent:rf_source_data -> PVcurrent_s1_agent_rsp_fifo:in_data
	wire          pvcurrent_s1_agent_rf_source_ready;                       // PVcurrent_s1_agent_rsp_fifo:in_ready -> PVcurrent_s1_agent:rf_source_ready
	wire          pvcurrent_s1_agent_rf_source_startofpacket;               // PVcurrent_s1_agent:rf_source_startofpacket -> PVcurrent_s1_agent_rsp_fifo:in_startofpacket
	wire          pvcurrent_s1_agent_rf_source_endofpacket;                 // PVcurrent_s1_agent:rf_source_endofpacket -> PVcurrent_s1_agent_rsp_fifo:in_endofpacket
	wire          pvcurrent_s1_agent_rsp_fifo_out_valid;                    // PVcurrent_s1_agent_rsp_fifo:out_valid -> PVcurrent_s1_agent:rf_sink_valid
	wire  [118:0] pvcurrent_s1_agent_rsp_fifo_out_data;                     // PVcurrent_s1_agent_rsp_fifo:out_data -> PVcurrent_s1_agent:rf_sink_data
	wire          pvcurrent_s1_agent_rsp_fifo_out_ready;                    // PVcurrent_s1_agent:rf_sink_ready -> PVcurrent_s1_agent_rsp_fifo:out_ready
	wire          pvcurrent_s1_agent_rsp_fifo_out_startofpacket;            // PVcurrent_s1_agent_rsp_fifo:out_startofpacket -> PVcurrent_s1_agent:rf_sink_startofpacket
	wire          pvcurrent_s1_agent_rsp_fifo_out_endofpacket;              // PVcurrent_s1_agent_rsp_fifo:out_endofpacket -> PVcurrent_s1_agent:rf_sink_endofpacket
	wire          pvcurrent_s1_agent_rdata_fifo_src_valid;                  // PVcurrent_s1_agent:rdata_fifo_src_valid -> PVcurrent_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pvcurrent_s1_agent_rdata_fifo_src_data;                   // PVcurrent_s1_agent:rdata_fifo_src_data -> PVcurrent_s1_agent_rdata_fifo:in_data
	wire          pvcurrent_s1_agent_rdata_fifo_src_ready;                  // PVcurrent_s1_agent_rdata_fifo:in_ready -> PVcurrent_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pvvoltage_s1_agent_m0_readdata;                           // PVvoltage_s1_translator:uav_readdata -> PVvoltage_s1_agent:m0_readdata
	wire          pvvoltage_s1_agent_m0_waitrequest;                        // PVvoltage_s1_translator:uav_waitrequest -> PVvoltage_s1_agent:m0_waitrequest
	wire          pvvoltage_s1_agent_m0_debugaccess;                        // PVvoltage_s1_agent:m0_debugaccess -> PVvoltage_s1_translator:uav_debugaccess
	wire   [20:0] pvvoltage_s1_agent_m0_address;                            // PVvoltage_s1_agent:m0_address -> PVvoltage_s1_translator:uav_address
	wire    [3:0] pvvoltage_s1_agent_m0_byteenable;                         // PVvoltage_s1_agent:m0_byteenable -> PVvoltage_s1_translator:uav_byteenable
	wire          pvvoltage_s1_agent_m0_read;                               // PVvoltage_s1_agent:m0_read -> PVvoltage_s1_translator:uav_read
	wire          pvvoltage_s1_agent_m0_readdatavalid;                      // PVvoltage_s1_translator:uav_readdatavalid -> PVvoltage_s1_agent:m0_readdatavalid
	wire          pvvoltage_s1_agent_m0_lock;                               // PVvoltage_s1_agent:m0_lock -> PVvoltage_s1_translator:uav_lock
	wire   [31:0] pvvoltage_s1_agent_m0_writedata;                          // PVvoltage_s1_agent:m0_writedata -> PVvoltage_s1_translator:uav_writedata
	wire          pvvoltage_s1_agent_m0_write;                              // PVvoltage_s1_agent:m0_write -> PVvoltage_s1_translator:uav_write
	wire    [2:0] pvvoltage_s1_agent_m0_burstcount;                         // PVvoltage_s1_agent:m0_burstcount -> PVvoltage_s1_translator:uav_burstcount
	wire          pvvoltage_s1_agent_rf_source_valid;                       // PVvoltage_s1_agent:rf_source_valid -> PVvoltage_s1_agent_rsp_fifo:in_valid
	wire  [118:0] pvvoltage_s1_agent_rf_source_data;                        // PVvoltage_s1_agent:rf_source_data -> PVvoltage_s1_agent_rsp_fifo:in_data
	wire          pvvoltage_s1_agent_rf_source_ready;                       // PVvoltage_s1_agent_rsp_fifo:in_ready -> PVvoltage_s1_agent:rf_source_ready
	wire          pvvoltage_s1_agent_rf_source_startofpacket;               // PVvoltage_s1_agent:rf_source_startofpacket -> PVvoltage_s1_agent_rsp_fifo:in_startofpacket
	wire          pvvoltage_s1_agent_rf_source_endofpacket;                 // PVvoltage_s1_agent:rf_source_endofpacket -> PVvoltage_s1_agent_rsp_fifo:in_endofpacket
	wire          pvvoltage_s1_agent_rsp_fifo_out_valid;                    // PVvoltage_s1_agent_rsp_fifo:out_valid -> PVvoltage_s1_agent:rf_sink_valid
	wire  [118:0] pvvoltage_s1_agent_rsp_fifo_out_data;                     // PVvoltage_s1_agent_rsp_fifo:out_data -> PVvoltage_s1_agent:rf_sink_data
	wire          pvvoltage_s1_agent_rsp_fifo_out_ready;                    // PVvoltage_s1_agent:rf_sink_ready -> PVvoltage_s1_agent_rsp_fifo:out_ready
	wire          pvvoltage_s1_agent_rsp_fifo_out_startofpacket;            // PVvoltage_s1_agent_rsp_fifo:out_startofpacket -> PVvoltage_s1_agent:rf_sink_startofpacket
	wire          pvvoltage_s1_agent_rsp_fifo_out_endofpacket;              // PVvoltage_s1_agent_rsp_fifo:out_endofpacket -> PVvoltage_s1_agent:rf_sink_endofpacket
	wire          pvvoltage_s1_agent_rdata_fifo_src_valid;                  // PVvoltage_s1_agent:rdata_fifo_src_valid -> PVvoltage_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pvvoltage_s1_agent_rdata_fifo_src_data;                   // PVvoltage_s1_agent:rdata_fifo_src_data -> PVvoltage_s1_agent_rdata_fifo:in_data
	wire          pvvoltage_s1_agent_rdata_fifo_src_ready;                  // PVvoltage_s1_agent_rdata_fifo:in_ready -> PVvoltage_s1_agent:rdata_fifo_src_ready
	wire   [31:0] bacurrent_s1_agent_m0_readdata;                           // BAcurrent_s1_translator:uav_readdata -> BAcurrent_s1_agent:m0_readdata
	wire          bacurrent_s1_agent_m0_waitrequest;                        // BAcurrent_s1_translator:uav_waitrequest -> BAcurrent_s1_agent:m0_waitrequest
	wire          bacurrent_s1_agent_m0_debugaccess;                        // BAcurrent_s1_agent:m0_debugaccess -> BAcurrent_s1_translator:uav_debugaccess
	wire   [20:0] bacurrent_s1_agent_m0_address;                            // BAcurrent_s1_agent:m0_address -> BAcurrent_s1_translator:uav_address
	wire    [3:0] bacurrent_s1_agent_m0_byteenable;                         // BAcurrent_s1_agent:m0_byteenable -> BAcurrent_s1_translator:uav_byteenable
	wire          bacurrent_s1_agent_m0_read;                               // BAcurrent_s1_agent:m0_read -> BAcurrent_s1_translator:uav_read
	wire          bacurrent_s1_agent_m0_readdatavalid;                      // BAcurrent_s1_translator:uav_readdatavalid -> BAcurrent_s1_agent:m0_readdatavalid
	wire          bacurrent_s1_agent_m0_lock;                               // BAcurrent_s1_agent:m0_lock -> BAcurrent_s1_translator:uav_lock
	wire   [31:0] bacurrent_s1_agent_m0_writedata;                          // BAcurrent_s1_agent:m0_writedata -> BAcurrent_s1_translator:uav_writedata
	wire          bacurrent_s1_agent_m0_write;                              // BAcurrent_s1_agent:m0_write -> BAcurrent_s1_translator:uav_write
	wire    [2:0] bacurrent_s1_agent_m0_burstcount;                         // BAcurrent_s1_agent:m0_burstcount -> BAcurrent_s1_translator:uav_burstcount
	wire          bacurrent_s1_agent_rf_source_valid;                       // BAcurrent_s1_agent:rf_source_valid -> BAcurrent_s1_agent_rsp_fifo:in_valid
	wire  [118:0] bacurrent_s1_agent_rf_source_data;                        // BAcurrent_s1_agent:rf_source_data -> BAcurrent_s1_agent_rsp_fifo:in_data
	wire          bacurrent_s1_agent_rf_source_ready;                       // BAcurrent_s1_agent_rsp_fifo:in_ready -> BAcurrent_s1_agent:rf_source_ready
	wire          bacurrent_s1_agent_rf_source_startofpacket;               // BAcurrent_s1_agent:rf_source_startofpacket -> BAcurrent_s1_agent_rsp_fifo:in_startofpacket
	wire          bacurrent_s1_agent_rf_source_endofpacket;                 // BAcurrent_s1_agent:rf_source_endofpacket -> BAcurrent_s1_agent_rsp_fifo:in_endofpacket
	wire          bacurrent_s1_agent_rsp_fifo_out_valid;                    // BAcurrent_s1_agent_rsp_fifo:out_valid -> BAcurrent_s1_agent:rf_sink_valid
	wire  [118:0] bacurrent_s1_agent_rsp_fifo_out_data;                     // BAcurrent_s1_agent_rsp_fifo:out_data -> BAcurrent_s1_agent:rf_sink_data
	wire          bacurrent_s1_agent_rsp_fifo_out_ready;                    // BAcurrent_s1_agent:rf_sink_ready -> BAcurrent_s1_agent_rsp_fifo:out_ready
	wire          bacurrent_s1_agent_rsp_fifo_out_startofpacket;            // BAcurrent_s1_agent_rsp_fifo:out_startofpacket -> BAcurrent_s1_agent:rf_sink_startofpacket
	wire          bacurrent_s1_agent_rsp_fifo_out_endofpacket;              // BAcurrent_s1_agent_rsp_fifo:out_endofpacket -> BAcurrent_s1_agent:rf_sink_endofpacket
	wire          bacurrent_s1_agent_rdata_fifo_src_valid;                  // BAcurrent_s1_agent:rdata_fifo_src_valid -> BAcurrent_s1_agent_rdata_fifo:in_valid
	wire   [33:0] bacurrent_s1_agent_rdata_fifo_src_data;                   // BAcurrent_s1_agent:rdata_fifo_src_data -> BAcurrent_s1_agent_rdata_fifo:in_data
	wire          bacurrent_s1_agent_rdata_fifo_src_ready;                  // BAcurrent_s1_agent_rdata_fifo:in_ready -> BAcurrent_s1_agent:rdata_fifo_src_ready
	wire   [31:0] bavoltage_s1_agent_m0_readdata;                           // BAvoltage_s1_translator:uav_readdata -> BAvoltage_s1_agent:m0_readdata
	wire          bavoltage_s1_agent_m0_waitrequest;                        // BAvoltage_s1_translator:uav_waitrequest -> BAvoltage_s1_agent:m0_waitrequest
	wire          bavoltage_s1_agent_m0_debugaccess;                        // BAvoltage_s1_agent:m0_debugaccess -> BAvoltage_s1_translator:uav_debugaccess
	wire   [20:0] bavoltage_s1_agent_m0_address;                            // BAvoltage_s1_agent:m0_address -> BAvoltage_s1_translator:uav_address
	wire    [3:0] bavoltage_s1_agent_m0_byteenable;                         // BAvoltage_s1_agent:m0_byteenable -> BAvoltage_s1_translator:uav_byteenable
	wire          bavoltage_s1_agent_m0_read;                               // BAvoltage_s1_agent:m0_read -> BAvoltage_s1_translator:uav_read
	wire          bavoltage_s1_agent_m0_readdatavalid;                      // BAvoltage_s1_translator:uav_readdatavalid -> BAvoltage_s1_agent:m0_readdatavalid
	wire          bavoltage_s1_agent_m0_lock;                               // BAvoltage_s1_agent:m0_lock -> BAvoltage_s1_translator:uav_lock
	wire   [31:0] bavoltage_s1_agent_m0_writedata;                          // BAvoltage_s1_agent:m0_writedata -> BAvoltage_s1_translator:uav_writedata
	wire          bavoltage_s1_agent_m0_write;                              // BAvoltage_s1_agent:m0_write -> BAvoltage_s1_translator:uav_write
	wire    [2:0] bavoltage_s1_agent_m0_burstcount;                         // BAvoltage_s1_agent:m0_burstcount -> BAvoltage_s1_translator:uav_burstcount
	wire          bavoltage_s1_agent_rf_source_valid;                       // BAvoltage_s1_agent:rf_source_valid -> BAvoltage_s1_agent_rsp_fifo:in_valid
	wire  [118:0] bavoltage_s1_agent_rf_source_data;                        // BAvoltage_s1_agent:rf_source_data -> BAvoltage_s1_agent_rsp_fifo:in_data
	wire          bavoltage_s1_agent_rf_source_ready;                       // BAvoltage_s1_agent_rsp_fifo:in_ready -> BAvoltage_s1_agent:rf_source_ready
	wire          bavoltage_s1_agent_rf_source_startofpacket;               // BAvoltage_s1_agent:rf_source_startofpacket -> BAvoltage_s1_agent_rsp_fifo:in_startofpacket
	wire          bavoltage_s1_agent_rf_source_endofpacket;                 // BAvoltage_s1_agent:rf_source_endofpacket -> BAvoltage_s1_agent_rsp_fifo:in_endofpacket
	wire          bavoltage_s1_agent_rsp_fifo_out_valid;                    // BAvoltage_s1_agent_rsp_fifo:out_valid -> BAvoltage_s1_agent:rf_sink_valid
	wire  [118:0] bavoltage_s1_agent_rsp_fifo_out_data;                     // BAvoltage_s1_agent_rsp_fifo:out_data -> BAvoltage_s1_agent:rf_sink_data
	wire          bavoltage_s1_agent_rsp_fifo_out_ready;                    // BAvoltage_s1_agent:rf_sink_ready -> BAvoltage_s1_agent_rsp_fifo:out_ready
	wire          bavoltage_s1_agent_rsp_fifo_out_startofpacket;            // BAvoltage_s1_agent_rsp_fifo:out_startofpacket -> BAvoltage_s1_agent:rf_sink_startofpacket
	wire          bavoltage_s1_agent_rsp_fifo_out_endofpacket;              // BAvoltage_s1_agent_rsp_fifo:out_endofpacket -> BAvoltage_s1_agent:rf_sink_endofpacket
	wire          bavoltage_s1_agent_rdata_fifo_src_valid;                  // BAvoltage_s1_agent:rdata_fifo_src_valid -> BAvoltage_s1_agent_rdata_fifo:in_valid
	wire   [33:0] bavoltage_s1_agent_rdata_fifo_src_data;                   // BAvoltage_s1_agent:rdata_fifo_src_data -> BAvoltage_s1_agent_rdata_fifo:in_data
	wire          bavoltage_s1_agent_rdata_fifo_src_ready;                  // BAvoltage_s1_agent_rdata_fifo:in_ready -> BAvoltage_s1_agent:rdata_fifo_src_ready
	wire   [31:0] vgr_current_s1_agent_m0_readdata;                         // VGR_current_s1_translator:uav_readdata -> VGR_current_s1_agent:m0_readdata
	wire          vgr_current_s1_agent_m0_waitrequest;                      // VGR_current_s1_translator:uav_waitrequest -> VGR_current_s1_agent:m0_waitrequest
	wire          vgr_current_s1_agent_m0_debugaccess;                      // VGR_current_s1_agent:m0_debugaccess -> VGR_current_s1_translator:uav_debugaccess
	wire   [20:0] vgr_current_s1_agent_m0_address;                          // VGR_current_s1_agent:m0_address -> VGR_current_s1_translator:uav_address
	wire    [3:0] vgr_current_s1_agent_m0_byteenable;                       // VGR_current_s1_agent:m0_byteenable -> VGR_current_s1_translator:uav_byteenable
	wire          vgr_current_s1_agent_m0_read;                             // VGR_current_s1_agent:m0_read -> VGR_current_s1_translator:uav_read
	wire          vgr_current_s1_agent_m0_readdatavalid;                    // VGR_current_s1_translator:uav_readdatavalid -> VGR_current_s1_agent:m0_readdatavalid
	wire          vgr_current_s1_agent_m0_lock;                             // VGR_current_s1_agent:m0_lock -> VGR_current_s1_translator:uav_lock
	wire   [31:0] vgr_current_s1_agent_m0_writedata;                        // VGR_current_s1_agent:m0_writedata -> VGR_current_s1_translator:uav_writedata
	wire          vgr_current_s1_agent_m0_write;                            // VGR_current_s1_agent:m0_write -> VGR_current_s1_translator:uav_write
	wire    [2:0] vgr_current_s1_agent_m0_burstcount;                       // VGR_current_s1_agent:m0_burstcount -> VGR_current_s1_translator:uav_burstcount
	wire          vgr_current_s1_agent_rf_source_valid;                     // VGR_current_s1_agent:rf_source_valid -> VGR_current_s1_agent_rsp_fifo:in_valid
	wire  [118:0] vgr_current_s1_agent_rf_source_data;                      // VGR_current_s1_agent:rf_source_data -> VGR_current_s1_agent_rsp_fifo:in_data
	wire          vgr_current_s1_agent_rf_source_ready;                     // VGR_current_s1_agent_rsp_fifo:in_ready -> VGR_current_s1_agent:rf_source_ready
	wire          vgr_current_s1_agent_rf_source_startofpacket;             // VGR_current_s1_agent:rf_source_startofpacket -> VGR_current_s1_agent_rsp_fifo:in_startofpacket
	wire          vgr_current_s1_agent_rf_source_endofpacket;               // VGR_current_s1_agent:rf_source_endofpacket -> VGR_current_s1_agent_rsp_fifo:in_endofpacket
	wire          vgr_current_s1_agent_rsp_fifo_out_valid;                  // VGR_current_s1_agent_rsp_fifo:out_valid -> VGR_current_s1_agent:rf_sink_valid
	wire  [118:0] vgr_current_s1_agent_rsp_fifo_out_data;                   // VGR_current_s1_agent_rsp_fifo:out_data -> VGR_current_s1_agent:rf_sink_data
	wire          vgr_current_s1_agent_rsp_fifo_out_ready;                  // VGR_current_s1_agent:rf_sink_ready -> VGR_current_s1_agent_rsp_fifo:out_ready
	wire          vgr_current_s1_agent_rsp_fifo_out_startofpacket;          // VGR_current_s1_agent_rsp_fifo:out_startofpacket -> VGR_current_s1_agent:rf_sink_startofpacket
	wire          vgr_current_s1_agent_rsp_fifo_out_endofpacket;            // VGR_current_s1_agent_rsp_fifo:out_endofpacket -> VGR_current_s1_agent:rf_sink_endofpacket
	wire          vgr_current_s1_agent_rdata_fifo_src_valid;                // VGR_current_s1_agent:rdata_fifo_src_valid -> VGR_current_s1_agent_rdata_fifo:in_valid
	wire   [33:0] vgr_current_s1_agent_rdata_fifo_src_data;                 // VGR_current_s1_agent:rdata_fifo_src_data -> VGR_current_s1_agent_rdata_fifo:in_data
	wire          vgr_current_s1_agent_rdata_fifo_src_ready;                // VGR_current_s1_agent_rdata_fifo:in_ready -> VGR_current_s1_agent:rdata_fifo_src_ready
	wire   [31:0] vgs_current_s1_agent_m0_readdata;                         // VGS_current_s1_translator:uav_readdata -> VGS_current_s1_agent:m0_readdata
	wire          vgs_current_s1_agent_m0_waitrequest;                      // VGS_current_s1_translator:uav_waitrequest -> VGS_current_s1_agent:m0_waitrequest
	wire          vgs_current_s1_agent_m0_debugaccess;                      // VGS_current_s1_agent:m0_debugaccess -> VGS_current_s1_translator:uav_debugaccess
	wire   [20:0] vgs_current_s1_agent_m0_address;                          // VGS_current_s1_agent:m0_address -> VGS_current_s1_translator:uav_address
	wire    [3:0] vgs_current_s1_agent_m0_byteenable;                       // VGS_current_s1_agent:m0_byteenable -> VGS_current_s1_translator:uav_byteenable
	wire          vgs_current_s1_agent_m0_read;                             // VGS_current_s1_agent:m0_read -> VGS_current_s1_translator:uav_read
	wire          vgs_current_s1_agent_m0_readdatavalid;                    // VGS_current_s1_translator:uav_readdatavalid -> VGS_current_s1_agent:m0_readdatavalid
	wire          vgs_current_s1_agent_m0_lock;                             // VGS_current_s1_agent:m0_lock -> VGS_current_s1_translator:uav_lock
	wire   [31:0] vgs_current_s1_agent_m0_writedata;                        // VGS_current_s1_agent:m0_writedata -> VGS_current_s1_translator:uav_writedata
	wire          vgs_current_s1_agent_m0_write;                            // VGS_current_s1_agent:m0_write -> VGS_current_s1_translator:uav_write
	wire    [2:0] vgs_current_s1_agent_m0_burstcount;                       // VGS_current_s1_agent:m0_burstcount -> VGS_current_s1_translator:uav_burstcount
	wire          vgs_current_s1_agent_rf_source_valid;                     // VGS_current_s1_agent:rf_source_valid -> VGS_current_s1_agent_rsp_fifo:in_valid
	wire  [118:0] vgs_current_s1_agent_rf_source_data;                      // VGS_current_s1_agent:rf_source_data -> VGS_current_s1_agent_rsp_fifo:in_data
	wire          vgs_current_s1_agent_rf_source_ready;                     // VGS_current_s1_agent_rsp_fifo:in_ready -> VGS_current_s1_agent:rf_source_ready
	wire          vgs_current_s1_agent_rf_source_startofpacket;             // VGS_current_s1_agent:rf_source_startofpacket -> VGS_current_s1_agent_rsp_fifo:in_startofpacket
	wire          vgs_current_s1_agent_rf_source_endofpacket;               // VGS_current_s1_agent:rf_source_endofpacket -> VGS_current_s1_agent_rsp_fifo:in_endofpacket
	wire          vgs_current_s1_agent_rsp_fifo_out_valid;                  // VGS_current_s1_agent_rsp_fifo:out_valid -> VGS_current_s1_agent:rf_sink_valid
	wire  [118:0] vgs_current_s1_agent_rsp_fifo_out_data;                   // VGS_current_s1_agent_rsp_fifo:out_data -> VGS_current_s1_agent:rf_sink_data
	wire          vgs_current_s1_agent_rsp_fifo_out_ready;                  // VGS_current_s1_agent:rf_sink_ready -> VGS_current_s1_agent_rsp_fifo:out_ready
	wire          vgs_current_s1_agent_rsp_fifo_out_startofpacket;          // VGS_current_s1_agent_rsp_fifo:out_startofpacket -> VGS_current_s1_agent:rf_sink_startofpacket
	wire          vgs_current_s1_agent_rsp_fifo_out_endofpacket;            // VGS_current_s1_agent_rsp_fifo:out_endofpacket -> VGS_current_s1_agent:rf_sink_endofpacket
	wire          vgs_current_s1_agent_rdata_fifo_src_valid;                // VGS_current_s1_agent:rdata_fifo_src_valid -> VGS_current_s1_agent_rdata_fifo:in_valid
	wire   [33:0] vgs_current_s1_agent_rdata_fifo_src_data;                 // VGS_current_s1_agent:rdata_fifo_src_data -> VGS_current_s1_agent_rdata_fifo:in_data
	wire          vgs_current_s1_agent_rdata_fifo_src_ready;                // VGS_current_s1_agent_rdata_fifo:in_ready -> VGS_current_s1_agent:rdata_fifo_src_ready
	wire   [31:0] vgt_current_s1_agent_m0_readdata;                         // VGT_current_s1_translator:uav_readdata -> VGT_current_s1_agent:m0_readdata
	wire          vgt_current_s1_agent_m0_waitrequest;                      // VGT_current_s1_translator:uav_waitrequest -> VGT_current_s1_agent:m0_waitrequest
	wire          vgt_current_s1_agent_m0_debugaccess;                      // VGT_current_s1_agent:m0_debugaccess -> VGT_current_s1_translator:uav_debugaccess
	wire   [20:0] vgt_current_s1_agent_m0_address;                          // VGT_current_s1_agent:m0_address -> VGT_current_s1_translator:uav_address
	wire    [3:0] vgt_current_s1_agent_m0_byteenable;                       // VGT_current_s1_agent:m0_byteenable -> VGT_current_s1_translator:uav_byteenable
	wire          vgt_current_s1_agent_m0_read;                             // VGT_current_s1_agent:m0_read -> VGT_current_s1_translator:uav_read
	wire          vgt_current_s1_agent_m0_readdatavalid;                    // VGT_current_s1_translator:uav_readdatavalid -> VGT_current_s1_agent:m0_readdatavalid
	wire          vgt_current_s1_agent_m0_lock;                             // VGT_current_s1_agent:m0_lock -> VGT_current_s1_translator:uav_lock
	wire   [31:0] vgt_current_s1_agent_m0_writedata;                        // VGT_current_s1_agent:m0_writedata -> VGT_current_s1_translator:uav_writedata
	wire          vgt_current_s1_agent_m0_write;                            // VGT_current_s1_agent:m0_write -> VGT_current_s1_translator:uav_write
	wire    [2:0] vgt_current_s1_agent_m0_burstcount;                       // VGT_current_s1_agent:m0_burstcount -> VGT_current_s1_translator:uav_burstcount
	wire          vgt_current_s1_agent_rf_source_valid;                     // VGT_current_s1_agent:rf_source_valid -> VGT_current_s1_agent_rsp_fifo:in_valid
	wire  [118:0] vgt_current_s1_agent_rf_source_data;                      // VGT_current_s1_agent:rf_source_data -> VGT_current_s1_agent_rsp_fifo:in_data
	wire          vgt_current_s1_agent_rf_source_ready;                     // VGT_current_s1_agent_rsp_fifo:in_ready -> VGT_current_s1_agent:rf_source_ready
	wire          vgt_current_s1_agent_rf_source_startofpacket;             // VGT_current_s1_agent:rf_source_startofpacket -> VGT_current_s1_agent_rsp_fifo:in_startofpacket
	wire          vgt_current_s1_agent_rf_source_endofpacket;               // VGT_current_s1_agent:rf_source_endofpacket -> VGT_current_s1_agent_rsp_fifo:in_endofpacket
	wire          vgt_current_s1_agent_rsp_fifo_out_valid;                  // VGT_current_s1_agent_rsp_fifo:out_valid -> VGT_current_s1_agent:rf_sink_valid
	wire  [118:0] vgt_current_s1_agent_rsp_fifo_out_data;                   // VGT_current_s1_agent_rsp_fifo:out_data -> VGT_current_s1_agent:rf_sink_data
	wire          vgt_current_s1_agent_rsp_fifo_out_ready;                  // VGT_current_s1_agent:rf_sink_ready -> VGT_current_s1_agent_rsp_fifo:out_ready
	wire          vgt_current_s1_agent_rsp_fifo_out_startofpacket;          // VGT_current_s1_agent_rsp_fifo:out_startofpacket -> VGT_current_s1_agent:rf_sink_startofpacket
	wire          vgt_current_s1_agent_rsp_fifo_out_endofpacket;            // VGT_current_s1_agent_rsp_fifo:out_endofpacket -> VGT_current_s1_agent:rf_sink_endofpacket
	wire          vgt_current_s1_agent_rdata_fifo_src_valid;                // VGT_current_s1_agent:rdata_fifo_src_valid -> VGT_current_s1_agent_rdata_fifo:in_valid
	wire   [33:0] vgt_current_s1_agent_rdata_fifo_src_data;                 // VGT_current_s1_agent:rdata_fifo_src_data -> VGT_current_s1_agent_rdata_fifo:in_data
	wire          vgt_current_s1_agent_rdata_fifo_src_ready;                // VGT_current_s1_agent_rdata_fifo:in_ready -> VGT_current_s1_agent:rdata_fifo_src_ready
	wire   [31:0] vgr_voltage_s1_agent_m0_readdata;                         // VGR_voltage_s1_translator:uav_readdata -> VGR_voltage_s1_agent:m0_readdata
	wire          vgr_voltage_s1_agent_m0_waitrequest;                      // VGR_voltage_s1_translator:uav_waitrequest -> VGR_voltage_s1_agent:m0_waitrequest
	wire          vgr_voltage_s1_agent_m0_debugaccess;                      // VGR_voltage_s1_agent:m0_debugaccess -> VGR_voltage_s1_translator:uav_debugaccess
	wire   [20:0] vgr_voltage_s1_agent_m0_address;                          // VGR_voltage_s1_agent:m0_address -> VGR_voltage_s1_translator:uav_address
	wire    [3:0] vgr_voltage_s1_agent_m0_byteenable;                       // VGR_voltage_s1_agent:m0_byteenable -> VGR_voltage_s1_translator:uav_byteenable
	wire          vgr_voltage_s1_agent_m0_read;                             // VGR_voltage_s1_agent:m0_read -> VGR_voltage_s1_translator:uav_read
	wire          vgr_voltage_s1_agent_m0_readdatavalid;                    // VGR_voltage_s1_translator:uav_readdatavalid -> VGR_voltage_s1_agent:m0_readdatavalid
	wire          vgr_voltage_s1_agent_m0_lock;                             // VGR_voltage_s1_agent:m0_lock -> VGR_voltage_s1_translator:uav_lock
	wire   [31:0] vgr_voltage_s1_agent_m0_writedata;                        // VGR_voltage_s1_agent:m0_writedata -> VGR_voltage_s1_translator:uav_writedata
	wire          vgr_voltage_s1_agent_m0_write;                            // VGR_voltage_s1_agent:m0_write -> VGR_voltage_s1_translator:uav_write
	wire    [2:0] vgr_voltage_s1_agent_m0_burstcount;                       // VGR_voltage_s1_agent:m0_burstcount -> VGR_voltage_s1_translator:uav_burstcount
	wire          vgr_voltage_s1_agent_rf_source_valid;                     // VGR_voltage_s1_agent:rf_source_valid -> VGR_voltage_s1_agent_rsp_fifo:in_valid
	wire  [118:0] vgr_voltage_s1_agent_rf_source_data;                      // VGR_voltage_s1_agent:rf_source_data -> VGR_voltage_s1_agent_rsp_fifo:in_data
	wire          vgr_voltage_s1_agent_rf_source_ready;                     // VGR_voltage_s1_agent_rsp_fifo:in_ready -> VGR_voltage_s1_agent:rf_source_ready
	wire          vgr_voltage_s1_agent_rf_source_startofpacket;             // VGR_voltage_s1_agent:rf_source_startofpacket -> VGR_voltage_s1_agent_rsp_fifo:in_startofpacket
	wire          vgr_voltage_s1_agent_rf_source_endofpacket;               // VGR_voltage_s1_agent:rf_source_endofpacket -> VGR_voltage_s1_agent_rsp_fifo:in_endofpacket
	wire          vgr_voltage_s1_agent_rsp_fifo_out_valid;                  // VGR_voltage_s1_agent_rsp_fifo:out_valid -> VGR_voltage_s1_agent:rf_sink_valid
	wire  [118:0] vgr_voltage_s1_agent_rsp_fifo_out_data;                   // VGR_voltage_s1_agent_rsp_fifo:out_data -> VGR_voltage_s1_agent:rf_sink_data
	wire          vgr_voltage_s1_agent_rsp_fifo_out_ready;                  // VGR_voltage_s1_agent:rf_sink_ready -> VGR_voltage_s1_agent_rsp_fifo:out_ready
	wire          vgr_voltage_s1_agent_rsp_fifo_out_startofpacket;          // VGR_voltage_s1_agent_rsp_fifo:out_startofpacket -> VGR_voltage_s1_agent:rf_sink_startofpacket
	wire          vgr_voltage_s1_agent_rsp_fifo_out_endofpacket;            // VGR_voltage_s1_agent_rsp_fifo:out_endofpacket -> VGR_voltage_s1_agent:rf_sink_endofpacket
	wire          vgr_voltage_s1_agent_rdata_fifo_src_valid;                // VGR_voltage_s1_agent:rdata_fifo_src_valid -> VGR_voltage_s1_agent_rdata_fifo:in_valid
	wire   [33:0] vgr_voltage_s1_agent_rdata_fifo_src_data;                 // VGR_voltage_s1_agent:rdata_fifo_src_data -> VGR_voltage_s1_agent_rdata_fifo:in_data
	wire          vgr_voltage_s1_agent_rdata_fifo_src_ready;                // VGR_voltage_s1_agent_rdata_fifo:in_ready -> VGR_voltage_s1_agent:rdata_fifo_src_ready
	wire   [31:0] vgs_voltage_s1_agent_m0_readdata;                         // VGS_voltage_s1_translator:uav_readdata -> VGS_voltage_s1_agent:m0_readdata
	wire          vgs_voltage_s1_agent_m0_waitrequest;                      // VGS_voltage_s1_translator:uav_waitrequest -> VGS_voltage_s1_agent:m0_waitrequest
	wire          vgs_voltage_s1_agent_m0_debugaccess;                      // VGS_voltage_s1_agent:m0_debugaccess -> VGS_voltage_s1_translator:uav_debugaccess
	wire   [20:0] vgs_voltage_s1_agent_m0_address;                          // VGS_voltage_s1_agent:m0_address -> VGS_voltage_s1_translator:uav_address
	wire    [3:0] vgs_voltage_s1_agent_m0_byteenable;                       // VGS_voltage_s1_agent:m0_byteenable -> VGS_voltage_s1_translator:uav_byteenable
	wire          vgs_voltage_s1_agent_m0_read;                             // VGS_voltage_s1_agent:m0_read -> VGS_voltage_s1_translator:uav_read
	wire          vgs_voltage_s1_agent_m0_readdatavalid;                    // VGS_voltage_s1_translator:uav_readdatavalid -> VGS_voltage_s1_agent:m0_readdatavalid
	wire          vgs_voltage_s1_agent_m0_lock;                             // VGS_voltage_s1_agent:m0_lock -> VGS_voltage_s1_translator:uav_lock
	wire   [31:0] vgs_voltage_s1_agent_m0_writedata;                        // VGS_voltage_s1_agent:m0_writedata -> VGS_voltage_s1_translator:uav_writedata
	wire          vgs_voltage_s1_agent_m0_write;                            // VGS_voltage_s1_agent:m0_write -> VGS_voltage_s1_translator:uav_write
	wire    [2:0] vgs_voltage_s1_agent_m0_burstcount;                       // VGS_voltage_s1_agent:m0_burstcount -> VGS_voltage_s1_translator:uav_burstcount
	wire          vgs_voltage_s1_agent_rf_source_valid;                     // VGS_voltage_s1_agent:rf_source_valid -> VGS_voltage_s1_agent_rsp_fifo:in_valid
	wire  [118:0] vgs_voltage_s1_agent_rf_source_data;                      // VGS_voltage_s1_agent:rf_source_data -> VGS_voltage_s1_agent_rsp_fifo:in_data
	wire          vgs_voltage_s1_agent_rf_source_ready;                     // VGS_voltage_s1_agent_rsp_fifo:in_ready -> VGS_voltage_s1_agent:rf_source_ready
	wire          vgs_voltage_s1_agent_rf_source_startofpacket;             // VGS_voltage_s1_agent:rf_source_startofpacket -> VGS_voltage_s1_agent_rsp_fifo:in_startofpacket
	wire          vgs_voltage_s1_agent_rf_source_endofpacket;               // VGS_voltage_s1_agent:rf_source_endofpacket -> VGS_voltage_s1_agent_rsp_fifo:in_endofpacket
	wire          vgs_voltage_s1_agent_rsp_fifo_out_valid;                  // VGS_voltage_s1_agent_rsp_fifo:out_valid -> VGS_voltage_s1_agent:rf_sink_valid
	wire  [118:0] vgs_voltage_s1_agent_rsp_fifo_out_data;                   // VGS_voltage_s1_agent_rsp_fifo:out_data -> VGS_voltage_s1_agent:rf_sink_data
	wire          vgs_voltage_s1_agent_rsp_fifo_out_ready;                  // VGS_voltage_s1_agent:rf_sink_ready -> VGS_voltage_s1_agent_rsp_fifo:out_ready
	wire          vgs_voltage_s1_agent_rsp_fifo_out_startofpacket;          // VGS_voltage_s1_agent_rsp_fifo:out_startofpacket -> VGS_voltage_s1_agent:rf_sink_startofpacket
	wire          vgs_voltage_s1_agent_rsp_fifo_out_endofpacket;            // VGS_voltage_s1_agent_rsp_fifo:out_endofpacket -> VGS_voltage_s1_agent:rf_sink_endofpacket
	wire          vgs_voltage_s1_agent_rdata_fifo_src_valid;                // VGS_voltage_s1_agent:rdata_fifo_src_valid -> VGS_voltage_s1_agent_rdata_fifo:in_valid
	wire   [33:0] vgs_voltage_s1_agent_rdata_fifo_src_data;                 // VGS_voltage_s1_agent:rdata_fifo_src_data -> VGS_voltage_s1_agent_rdata_fifo:in_data
	wire          vgs_voltage_s1_agent_rdata_fifo_src_ready;                // VGS_voltage_s1_agent_rdata_fifo:in_ready -> VGS_voltage_s1_agent:rdata_fifo_src_ready
	wire   [31:0] vgt_voltage_s1_agent_m0_readdata;                         // VGT_voltage_s1_translator:uav_readdata -> VGT_voltage_s1_agent:m0_readdata
	wire          vgt_voltage_s1_agent_m0_waitrequest;                      // VGT_voltage_s1_translator:uav_waitrequest -> VGT_voltage_s1_agent:m0_waitrequest
	wire          vgt_voltage_s1_agent_m0_debugaccess;                      // VGT_voltage_s1_agent:m0_debugaccess -> VGT_voltage_s1_translator:uav_debugaccess
	wire   [20:0] vgt_voltage_s1_agent_m0_address;                          // VGT_voltage_s1_agent:m0_address -> VGT_voltage_s1_translator:uav_address
	wire    [3:0] vgt_voltage_s1_agent_m0_byteenable;                       // VGT_voltage_s1_agent:m0_byteenable -> VGT_voltage_s1_translator:uav_byteenable
	wire          vgt_voltage_s1_agent_m0_read;                             // VGT_voltage_s1_agent:m0_read -> VGT_voltage_s1_translator:uav_read
	wire          vgt_voltage_s1_agent_m0_readdatavalid;                    // VGT_voltage_s1_translator:uav_readdatavalid -> VGT_voltage_s1_agent:m0_readdatavalid
	wire          vgt_voltage_s1_agent_m0_lock;                             // VGT_voltage_s1_agent:m0_lock -> VGT_voltage_s1_translator:uav_lock
	wire   [31:0] vgt_voltage_s1_agent_m0_writedata;                        // VGT_voltage_s1_agent:m0_writedata -> VGT_voltage_s1_translator:uav_writedata
	wire          vgt_voltage_s1_agent_m0_write;                            // VGT_voltage_s1_agent:m0_write -> VGT_voltage_s1_translator:uav_write
	wire    [2:0] vgt_voltage_s1_agent_m0_burstcount;                       // VGT_voltage_s1_agent:m0_burstcount -> VGT_voltage_s1_translator:uav_burstcount
	wire          vgt_voltage_s1_agent_rf_source_valid;                     // VGT_voltage_s1_agent:rf_source_valid -> VGT_voltage_s1_agent_rsp_fifo:in_valid
	wire  [118:0] vgt_voltage_s1_agent_rf_source_data;                      // VGT_voltage_s1_agent:rf_source_data -> VGT_voltage_s1_agent_rsp_fifo:in_data
	wire          vgt_voltage_s1_agent_rf_source_ready;                     // VGT_voltage_s1_agent_rsp_fifo:in_ready -> VGT_voltage_s1_agent:rf_source_ready
	wire          vgt_voltage_s1_agent_rf_source_startofpacket;             // VGT_voltage_s1_agent:rf_source_startofpacket -> VGT_voltage_s1_agent_rsp_fifo:in_startofpacket
	wire          vgt_voltage_s1_agent_rf_source_endofpacket;               // VGT_voltage_s1_agent:rf_source_endofpacket -> VGT_voltage_s1_agent_rsp_fifo:in_endofpacket
	wire          vgt_voltage_s1_agent_rsp_fifo_out_valid;                  // VGT_voltage_s1_agent_rsp_fifo:out_valid -> VGT_voltage_s1_agent:rf_sink_valid
	wire  [118:0] vgt_voltage_s1_agent_rsp_fifo_out_data;                   // VGT_voltage_s1_agent_rsp_fifo:out_data -> VGT_voltage_s1_agent:rf_sink_data
	wire          vgt_voltage_s1_agent_rsp_fifo_out_ready;                  // VGT_voltage_s1_agent:rf_sink_ready -> VGT_voltage_s1_agent_rsp_fifo:out_ready
	wire          vgt_voltage_s1_agent_rsp_fifo_out_startofpacket;          // VGT_voltage_s1_agent_rsp_fifo:out_startofpacket -> VGT_voltage_s1_agent:rf_sink_startofpacket
	wire          vgt_voltage_s1_agent_rsp_fifo_out_endofpacket;            // VGT_voltage_s1_agent_rsp_fifo:out_endofpacket -> VGT_voltage_s1_agent:rf_sink_endofpacket
	wire          vgt_voltage_s1_agent_rdata_fifo_src_valid;                // VGT_voltage_s1_agent:rdata_fifo_src_valid -> VGT_voltage_s1_agent_rdata_fifo:in_valid
	wire   [33:0] vgt_voltage_s1_agent_rdata_fifo_src_data;                 // VGT_voltage_s1_agent:rdata_fifo_src_data -> VGT_voltage_s1_agent_rdata_fifo:in_data
	wire          vgt_voltage_s1_agent_rdata_fifo_src_ready;                // VGT_voltage_s1_agent_rdata_fifo:in_ready -> VGT_voltage_s1_agent:rdata_fifo_src_ready
	wire   [31:0] phase_s1_agent_m0_readdata;                               // phase_s1_translator:uav_readdata -> phase_s1_agent:m0_readdata
	wire          phase_s1_agent_m0_waitrequest;                            // phase_s1_translator:uav_waitrequest -> phase_s1_agent:m0_waitrequest
	wire          phase_s1_agent_m0_debugaccess;                            // phase_s1_agent:m0_debugaccess -> phase_s1_translator:uav_debugaccess
	wire   [20:0] phase_s1_agent_m0_address;                                // phase_s1_agent:m0_address -> phase_s1_translator:uav_address
	wire    [3:0] phase_s1_agent_m0_byteenable;                             // phase_s1_agent:m0_byteenable -> phase_s1_translator:uav_byteenable
	wire          phase_s1_agent_m0_read;                                   // phase_s1_agent:m0_read -> phase_s1_translator:uav_read
	wire          phase_s1_agent_m0_readdatavalid;                          // phase_s1_translator:uav_readdatavalid -> phase_s1_agent:m0_readdatavalid
	wire          phase_s1_agent_m0_lock;                                   // phase_s1_agent:m0_lock -> phase_s1_translator:uav_lock
	wire   [31:0] phase_s1_agent_m0_writedata;                              // phase_s1_agent:m0_writedata -> phase_s1_translator:uav_writedata
	wire          phase_s1_agent_m0_write;                                  // phase_s1_agent:m0_write -> phase_s1_translator:uav_write
	wire    [2:0] phase_s1_agent_m0_burstcount;                             // phase_s1_agent:m0_burstcount -> phase_s1_translator:uav_burstcount
	wire          phase_s1_agent_rf_source_valid;                           // phase_s1_agent:rf_source_valid -> phase_s1_agent_rsp_fifo:in_valid
	wire  [118:0] phase_s1_agent_rf_source_data;                            // phase_s1_agent:rf_source_data -> phase_s1_agent_rsp_fifo:in_data
	wire          phase_s1_agent_rf_source_ready;                           // phase_s1_agent_rsp_fifo:in_ready -> phase_s1_agent:rf_source_ready
	wire          phase_s1_agent_rf_source_startofpacket;                   // phase_s1_agent:rf_source_startofpacket -> phase_s1_agent_rsp_fifo:in_startofpacket
	wire          phase_s1_agent_rf_source_endofpacket;                     // phase_s1_agent:rf_source_endofpacket -> phase_s1_agent_rsp_fifo:in_endofpacket
	wire          phase_s1_agent_rsp_fifo_out_valid;                        // phase_s1_agent_rsp_fifo:out_valid -> phase_s1_agent:rf_sink_valid
	wire  [118:0] phase_s1_agent_rsp_fifo_out_data;                         // phase_s1_agent_rsp_fifo:out_data -> phase_s1_agent:rf_sink_data
	wire          phase_s1_agent_rsp_fifo_out_ready;                        // phase_s1_agent:rf_sink_ready -> phase_s1_agent_rsp_fifo:out_ready
	wire          phase_s1_agent_rsp_fifo_out_startofpacket;                // phase_s1_agent_rsp_fifo:out_startofpacket -> phase_s1_agent:rf_sink_startofpacket
	wire          phase_s1_agent_rsp_fifo_out_endofpacket;                  // phase_s1_agent_rsp_fifo:out_endofpacket -> phase_s1_agent:rf_sink_endofpacket
	wire          phase_s1_agent_rdata_fifo_src_valid;                      // phase_s1_agent:rdata_fifo_src_valid -> phase_s1_agent_rdata_fifo:in_valid
	wire   [33:0] phase_s1_agent_rdata_fifo_src_data;                       // phase_s1_agent:rdata_fifo_src_data -> phase_s1_agent_rdata_fifo:in_data
	wire          phase_s1_agent_rdata_fifo_src_ready;                      // phase_s1_agent_rdata_fifo:in_ready -> phase_s1_agent:rdata_fifo_src_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_valid;             // hps_0_h2f_lw_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [117:0] hps_0_h2f_lw_axi_master_agent_write_cp_data;              // hps_0_h2f_lw_axi_master_agent:write_cp_data -> router:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_ready;             // router:sink_ready -> hps_0_h2f_lw_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket;     // hps_0_h2f_lw_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket;       // hps_0_h2f_lw_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_valid;              // hps_0_h2f_lw_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [117:0] hps_0_h2f_lw_axi_master_agent_read_cp_data;               // hps_0_h2f_lw_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_ready;              // router_001:sink_ready -> hps_0_h2f_lw_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket;      // hps_0_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket;        // hps_0_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          sw_s1_agent_rp_valid;                                     // sw_s1_agent:rp_valid -> router_002:sink_valid
	wire  [117:0] sw_s1_agent_rp_data;                                      // sw_s1_agent:rp_data -> router_002:sink_data
	wire          sw_s1_agent_rp_ready;                                     // router_002:sink_ready -> sw_s1_agent:rp_ready
	wire          sw_s1_agent_rp_startofpacket;                             // sw_s1_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          sw_s1_agent_rp_endofpacket;                               // sw_s1_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                     // router_002:src_valid -> rsp_demux:sink_valid
	wire  [117:0] router_002_src_data;                                      // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                     // rsp_demux:sink_ready -> router_002:src_ready
	wire   [12:0] router_002_src_channel;                                   // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                             // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                               // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          led_s1_agent_rp_valid;                                    // led_s1_agent:rp_valid -> router_003:sink_valid
	wire  [117:0] led_s1_agent_rp_data;                                     // led_s1_agent:rp_data -> router_003:sink_data
	wire          led_s1_agent_rp_ready;                                    // router_003:sink_ready -> led_s1_agent:rp_ready
	wire          led_s1_agent_rp_startofpacket;                            // led_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          led_s1_agent_rp_endofpacket;                              // led_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                     // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [117:0] router_003_src_data;                                      // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                     // rsp_demux_001:sink_ready -> router_003:src_ready
	wire   [12:0] router_003_src_channel;                                   // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                             // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                               // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          pvcurrent_s1_agent_rp_valid;                              // PVcurrent_s1_agent:rp_valid -> router_004:sink_valid
	wire  [117:0] pvcurrent_s1_agent_rp_data;                               // PVcurrent_s1_agent:rp_data -> router_004:sink_data
	wire          pvcurrent_s1_agent_rp_ready;                              // router_004:sink_ready -> PVcurrent_s1_agent:rp_ready
	wire          pvcurrent_s1_agent_rp_startofpacket;                      // PVcurrent_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          pvcurrent_s1_agent_rp_endofpacket;                        // PVcurrent_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                     // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [117:0] router_004_src_data;                                      // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                     // rsp_demux_002:sink_ready -> router_004:src_ready
	wire   [12:0] router_004_src_channel;                                   // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                             // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                               // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          pvvoltage_s1_agent_rp_valid;                              // PVvoltage_s1_agent:rp_valid -> router_005:sink_valid
	wire  [117:0] pvvoltage_s1_agent_rp_data;                               // PVvoltage_s1_agent:rp_data -> router_005:sink_data
	wire          pvvoltage_s1_agent_rp_ready;                              // router_005:sink_ready -> PVvoltage_s1_agent:rp_ready
	wire          pvvoltage_s1_agent_rp_startofpacket;                      // PVvoltage_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          pvvoltage_s1_agent_rp_endofpacket;                        // PVvoltage_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                     // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [117:0] router_005_src_data;                                      // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                     // rsp_demux_003:sink_ready -> router_005:src_ready
	wire   [12:0] router_005_src_channel;                                   // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                             // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                               // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          bacurrent_s1_agent_rp_valid;                              // BAcurrent_s1_agent:rp_valid -> router_006:sink_valid
	wire  [117:0] bacurrent_s1_agent_rp_data;                               // BAcurrent_s1_agent:rp_data -> router_006:sink_data
	wire          bacurrent_s1_agent_rp_ready;                              // router_006:sink_ready -> BAcurrent_s1_agent:rp_ready
	wire          bacurrent_s1_agent_rp_startofpacket;                      // BAcurrent_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          bacurrent_s1_agent_rp_endofpacket;                        // BAcurrent_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                     // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [117:0] router_006_src_data;                                      // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                     // rsp_demux_004:sink_ready -> router_006:src_ready
	wire   [12:0] router_006_src_channel;                                   // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                             // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                               // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          bavoltage_s1_agent_rp_valid;                              // BAvoltage_s1_agent:rp_valid -> router_007:sink_valid
	wire  [117:0] bavoltage_s1_agent_rp_data;                               // BAvoltage_s1_agent:rp_data -> router_007:sink_data
	wire          bavoltage_s1_agent_rp_ready;                              // router_007:sink_ready -> BAvoltage_s1_agent:rp_ready
	wire          bavoltage_s1_agent_rp_startofpacket;                      // BAvoltage_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          bavoltage_s1_agent_rp_endofpacket;                        // BAvoltage_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                     // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [117:0] router_007_src_data;                                      // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                     // rsp_demux_005:sink_ready -> router_007:src_ready
	wire   [12:0] router_007_src_channel;                                   // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                             // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                               // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          vgr_current_s1_agent_rp_valid;                            // VGR_current_s1_agent:rp_valid -> router_008:sink_valid
	wire  [117:0] vgr_current_s1_agent_rp_data;                             // VGR_current_s1_agent:rp_data -> router_008:sink_data
	wire          vgr_current_s1_agent_rp_ready;                            // router_008:sink_ready -> VGR_current_s1_agent:rp_ready
	wire          vgr_current_s1_agent_rp_startofpacket;                    // VGR_current_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          vgr_current_s1_agent_rp_endofpacket;                      // VGR_current_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                     // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [117:0] router_008_src_data;                                      // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                     // rsp_demux_006:sink_ready -> router_008:src_ready
	wire   [12:0] router_008_src_channel;                                   // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                             // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                               // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          vgs_current_s1_agent_rp_valid;                            // VGS_current_s1_agent:rp_valid -> router_009:sink_valid
	wire  [117:0] vgs_current_s1_agent_rp_data;                             // VGS_current_s1_agent:rp_data -> router_009:sink_data
	wire          vgs_current_s1_agent_rp_ready;                            // router_009:sink_ready -> VGS_current_s1_agent:rp_ready
	wire          vgs_current_s1_agent_rp_startofpacket;                    // VGS_current_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          vgs_current_s1_agent_rp_endofpacket;                      // VGS_current_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                     // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [117:0] router_009_src_data;                                      // router_009:src_data -> rsp_demux_007:sink_data
	wire          router_009_src_ready;                                     // rsp_demux_007:sink_ready -> router_009:src_ready
	wire   [12:0] router_009_src_channel;                                   // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_startofpacket;                             // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_009_src_endofpacket;                               // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          vgt_current_s1_agent_rp_valid;                            // VGT_current_s1_agent:rp_valid -> router_010:sink_valid
	wire  [117:0] vgt_current_s1_agent_rp_data;                             // VGT_current_s1_agent:rp_data -> router_010:sink_data
	wire          vgt_current_s1_agent_rp_ready;                            // router_010:sink_ready -> VGT_current_s1_agent:rp_ready
	wire          vgt_current_s1_agent_rp_startofpacket;                    // VGT_current_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          vgt_current_s1_agent_rp_endofpacket;                      // VGT_current_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                     // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [117:0] router_010_src_data;                                      // router_010:src_data -> rsp_demux_008:sink_data
	wire          router_010_src_ready;                                     // rsp_demux_008:sink_ready -> router_010:src_ready
	wire   [12:0] router_010_src_channel;                                   // router_010:src_channel -> rsp_demux_008:sink_channel
	wire          router_010_src_startofpacket;                             // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_010_src_endofpacket;                               // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          vgr_voltage_s1_agent_rp_valid;                            // VGR_voltage_s1_agent:rp_valid -> router_011:sink_valid
	wire  [117:0] vgr_voltage_s1_agent_rp_data;                             // VGR_voltage_s1_agent:rp_data -> router_011:sink_data
	wire          vgr_voltage_s1_agent_rp_ready;                            // router_011:sink_ready -> VGR_voltage_s1_agent:rp_ready
	wire          vgr_voltage_s1_agent_rp_startofpacket;                    // VGR_voltage_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          vgr_voltage_s1_agent_rp_endofpacket;                      // VGR_voltage_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                     // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [117:0] router_011_src_data;                                      // router_011:src_data -> rsp_demux_009:sink_data
	wire          router_011_src_ready;                                     // rsp_demux_009:sink_ready -> router_011:src_ready
	wire   [12:0] router_011_src_channel;                                   // router_011:src_channel -> rsp_demux_009:sink_channel
	wire          router_011_src_startofpacket;                             // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_011_src_endofpacket;                               // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          vgs_voltage_s1_agent_rp_valid;                            // VGS_voltage_s1_agent:rp_valid -> router_012:sink_valid
	wire  [117:0] vgs_voltage_s1_agent_rp_data;                             // VGS_voltage_s1_agent:rp_data -> router_012:sink_data
	wire          vgs_voltage_s1_agent_rp_ready;                            // router_012:sink_ready -> VGS_voltage_s1_agent:rp_ready
	wire          vgs_voltage_s1_agent_rp_startofpacket;                    // VGS_voltage_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          vgs_voltage_s1_agent_rp_endofpacket;                      // VGS_voltage_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                     // router_012:src_valid -> rsp_demux_010:sink_valid
	wire  [117:0] router_012_src_data;                                      // router_012:src_data -> rsp_demux_010:sink_data
	wire          router_012_src_ready;                                     // rsp_demux_010:sink_ready -> router_012:src_ready
	wire   [12:0] router_012_src_channel;                                   // router_012:src_channel -> rsp_demux_010:sink_channel
	wire          router_012_src_startofpacket;                             // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_012_src_endofpacket;                               // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          vgt_voltage_s1_agent_rp_valid;                            // VGT_voltage_s1_agent:rp_valid -> router_013:sink_valid
	wire  [117:0] vgt_voltage_s1_agent_rp_data;                             // VGT_voltage_s1_agent:rp_data -> router_013:sink_data
	wire          vgt_voltage_s1_agent_rp_ready;                            // router_013:sink_ready -> VGT_voltage_s1_agent:rp_ready
	wire          vgt_voltage_s1_agent_rp_startofpacket;                    // VGT_voltage_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          vgt_voltage_s1_agent_rp_endofpacket;                      // VGT_voltage_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                     // router_013:src_valid -> rsp_demux_011:sink_valid
	wire  [117:0] router_013_src_data;                                      // router_013:src_data -> rsp_demux_011:sink_data
	wire          router_013_src_ready;                                     // rsp_demux_011:sink_ready -> router_013:src_ready
	wire   [12:0] router_013_src_channel;                                   // router_013:src_channel -> rsp_demux_011:sink_channel
	wire          router_013_src_startofpacket;                             // router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_013_src_endofpacket;                               // router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          phase_s1_agent_rp_valid;                                  // phase_s1_agent:rp_valid -> router_014:sink_valid
	wire  [117:0] phase_s1_agent_rp_data;                                   // phase_s1_agent:rp_data -> router_014:sink_data
	wire          phase_s1_agent_rp_ready;                                  // router_014:sink_ready -> phase_s1_agent:rp_ready
	wire          phase_s1_agent_rp_startofpacket;                          // phase_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          phase_s1_agent_rp_endofpacket;                            // phase_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                     // router_014:src_valid -> rsp_demux_012:sink_valid
	wire  [117:0] router_014_src_data;                                      // router_014:src_data -> rsp_demux_012:sink_data
	wire          router_014_src_ready;                                     // rsp_demux_012:sink_ready -> router_014:src_ready
	wire   [12:0] router_014_src_channel;                                   // router_014:src_channel -> rsp_demux_012:sink_channel
	wire          router_014_src_startofpacket;                             // router_014:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_014_src_endofpacket;                               // router_014:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          router_src_valid;                                         // router:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [117:0] router_src_data;                                          // router:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                         // hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire   [12:0] router_src_channel;                                       // router:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                 // router:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                   // router:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [117:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data;          // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready;         // cmd_demux:sink_ready -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire   [12:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel;       // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket; // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;   // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                        // rsp_mux:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [117:0] rsp_mux_src_data;                                         // rsp_mux:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                        // hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [12:0] rsp_mux_src_channel;                                      // rsp_mux:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                // rsp_mux:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                  // rsp_mux:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid;         // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:write_rp_valid
	wire  [117:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data;          // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:write_rp_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready;         // hps_0_h2f_lw_axi_master_agent:write_rp_ready -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire   [12:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel;       // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:write_rp_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket; // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;   // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                     // router_001:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [117:0] router_001_src_data;                                      // router_001:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                     // hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [12:0] router_001_src_channel;                                   // router_001:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                             // router_001:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                               // router_001:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [117:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data;          // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready;         // cmd_demux_001:sink_ready -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire   [12:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel;       // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket; // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;   // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                    // rsp_mux_001:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [117:0] rsp_mux_001_src_data;                                     // rsp_mux_001:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                    // hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [12:0] rsp_mux_001_src_channel;                                  // rsp_mux_001:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                            // rsp_mux_001:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                              // rsp_mux_001:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid;         // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:read_rp_valid
	wire  [117:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data;          // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:read_rp_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready;         // hps_0_h2f_lw_axi_master_agent:read_rp_ready -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire   [12:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel;       // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:read_rp_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket; // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;   // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                        // cmd_mux:src_valid -> sw_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_src_data;                                         // cmd_mux:src_data -> sw_s1_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                        // sw_s1_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire   [12:0] cmd_mux_src_channel;                                      // cmd_mux:src_channel -> sw_s1_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                // cmd_mux:src_startofpacket -> sw_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                  // cmd_mux:src_endofpacket -> sw_s1_burst_adapter:sink0_endofpacket
	wire          sw_s1_burst_adapter_source0_valid;                        // sw_s1_burst_adapter:source0_valid -> sw_s1_agent:cp_valid
	wire  [117:0] sw_s1_burst_adapter_source0_data;                         // sw_s1_burst_adapter:source0_data -> sw_s1_agent:cp_data
	wire          sw_s1_burst_adapter_source0_ready;                        // sw_s1_agent:cp_ready -> sw_s1_burst_adapter:source0_ready
	wire   [12:0] sw_s1_burst_adapter_source0_channel;                      // sw_s1_burst_adapter:source0_channel -> sw_s1_agent:cp_channel
	wire          sw_s1_burst_adapter_source0_startofpacket;                // sw_s1_burst_adapter:source0_startofpacket -> sw_s1_agent:cp_startofpacket
	wire          sw_s1_burst_adapter_source0_endofpacket;                  // sw_s1_burst_adapter:source0_endofpacket -> sw_s1_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                    // cmd_mux_001:src_valid -> led_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_001_src_data;                                     // cmd_mux_001:src_data -> led_s1_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                    // led_s1_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire   [12:0] cmd_mux_001_src_channel;                                  // cmd_mux_001:src_channel -> led_s1_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                            // cmd_mux_001:src_startofpacket -> led_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                              // cmd_mux_001:src_endofpacket -> led_s1_burst_adapter:sink0_endofpacket
	wire          led_s1_burst_adapter_source0_valid;                       // led_s1_burst_adapter:source0_valid -> led_s1_agent:cp_valid
	wire  [117:0] led_s1_burst_adapter_source0_data;                        // led_s1_burst_adapter:source0_data -> led_s1_agent:cp_data
	wire          led_s1_burst_adapter_source0_ready;                       // led_s1_agent:cp_ready -> led_s1_burst_adapter:source0_ready
	wire   [12:0] led_s1_burst_adapter_source0_channel;                     // led_s1_burst_adapter:source0_channel -> led_s1_agent:cp_channel
	wire          led_s1_burst_adapter_source0_startofpacket;               // led_s1_burst_adapter:source0_startofpacket -> led_s1_agent:cp_startofpacket
	wire          led_s1_burst_adapter_source0_endofpacket;                 // led_s1_burst_adapter:source0_endofpacket -> led_s1_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                    // cmd_mux_002:src_valid -> PVcurrent_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_002_src_data;                                     // cmd_mux_002:src_data -> PVcurrent_s1_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                    // PVcurrent_s1_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire   [12:0] cmd_mux_002_src_channel;                                  // cmd_mux_002:src_channel -> PVcurrent_s1_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                            // cmd_mux_002:src_startofpacket -> PVcurrent_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                              // cmd_mux_002:src_endofpacket -> PVcurrent_s1_burst_adapter:sink0_endofpacket
	wire          pvcurrent_s1_burst_adapter_source0_valid;                 // PVcurrent_s1_burst_adapter:source0_valid -> PVcurrent_s1_agent:cp_valid
	wire  [117:0] pvcurrent_s1_burst_adapter_source0_data;                  // PVcurrent_s1_burst_adapter:source0_data -> PVcurrent_s1_agent:cp_data
	wire          pvcurrent_s1_burst_adapter_source0_ready;                 // PVcurrent_s1_agent:cp_ready -> PVcurrent_s1_burst_adapter:source0_ready
	wire   [12:0] pvcurrent_s1_burst_adapter_source0_channel;               // PVcurrent_s1_burst_adapter:source0_channel -> PVcurrent_s1_agent:cp_channel
	wire          pvcurrent_s1_burst_adapter_source0_startofpacket;         // PVcurrent_s1_burst_adapter:source0_startofpacket -> PVcurrent_s1_agent:cp_startofpacket
	wire          pvcurrent_s1_burst_adapter_source0_endofpacket;           // PVcurrent_s1_burst_adapter:source0_endofpacket -> PVcurrent_s1_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                    // cmd_mux_003:src_valid -> PVvoltage_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_003_src_data;                                     // cmd_mux_003:src_data -> PVvoltage_s1_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                    // PVvoltage_s1_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire   [12:0] cmd_mux_003_src_channel;                                  // cmd_mux_003:src_channel -> PVvoltage_s1_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                            // cmd_mux_003:src_startofpacket -> PVvoltage_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                              // cmd_mux_003:src_endofpacket -> PVvoltage_s1_burst_adapter:sink0_endofpacket
	wire          pvvoltage_s1_burst_adapter_source0_valid;                 // PVvoltage_s1_burst_adapter:source0_valid -> PVvoltage_s1_agent:cp_valid
	wire  [117:0] pvvoltage_s1_burst_adapter_source0_data;                  // PVvoltage_s1_burst_adapter:source0_data -> PVvoltage_s1_agent:cp_data
	wire          pvvoltage_s1_burst_adapter_source0_ready;                 // PVvoltage_s1_agent:cp_ready -> PVvoltage_s1_burst_adapter:source0_ready
	wire   [12:0] pvvoltage_s1_burst_adapter_source0_channel;               // PVvoltage_s1_burst_adapter:source0_channel -> PVvoltage_s1_agent:cp_channel
	wire          pvvoltage_s1_burst_adapter_source0_startofpacket;         // PVvoltage_s1_burst_adapter:source0_startofpacket -> PVvoltage_s1_agent:cp_startofpacket
	wire          pvvoltage_s1_burst_adapter_source0_endofpacket;           // PVvoltage_s1_burst_adapter:source0_endofpacket -> PVvoltage_s1_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                    // cmd_mux_004:src_valid -> BAcurrent_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_004_src_data;                                     // cmd_mux_004:src_data -> BAcurrent_s1_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                    // BAcurrent_s1_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire   [12:0] cmd_mux_004_src_channel;                                  // cmd_mux_004:src_channel -> BAcurrent_s1_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                            // cmd_mux_004:src_startofpacket -> BAcurrent_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                              // cmd_mux_004:src_endofpacket -> BAcurrent_s1_burst_adapter:sink0_endofpacket
	wire          bacurrent_s1_burst_adapter_source0_valid;                 // BAcurrent_s1_burst_adapter:source0_valid -> BAcurrent_s1_agent:cp_valid
	wire  [117:0] bacurrent_s1_burst_adapter_source0_data;                  // BAcurrent_s1_burst_adapter:source0_data -> BAcurrent_s1_agent:cp_data
	wire          bacurrent_s1_burst_adapter_source0_ready;                 // BAcurrent_s1_agent:cp_ready -> BAcurrent_s1_burst_adapter:source0_ready
	wire   [12:0] bacurrent_s1_burst_adapter_source0_channel;               // BAcurrent_s1_burst_adapter:source0_channel -> BAcurrent_s1_agent:cp_channel
	wire          bacurrent_s1_burst_adapter_source0_startofpacket;         // BAcurrent_s1_burst_adapter:source0_startofpacket -> BAcurrent_s1_agent:cp_startofpacket
	wire          bacurrent_s1_burst_adapter_source0_endofpacket;           // BAcurrent_s1_burst_adapter:source0_endofpacket -> BAcurrent_s1_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                    // cmd_mux_005:src_valid -> BAvoltage_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_005_src_data;                                     // cmd_mux_005:src_data -> BAvoltage_s1_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                    // BAvoltage_s1_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire   [12:0] cmd_mux_005_src_channel;                                  // cmd_mux_005:src_channel -> BAvoltage_s1_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                            // cmd_mux_005:src_startofpacket -> BAvoltage_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                              // cmd_mux_005:src_endofpacket -> BAvoltage_s1_burst_adapter:sink0_endofpacket
	wire          bavoltage_s1_burst_adapter_source0_valid;                 // BAvoltage_s1_burst_adapter:source0_valid -> BAvoltage_s1_agent:cp_valid
	wire  [117:0] bavoltage_s1_burst_adapter_source0_data;                  // BAvoltage_s1_burst_adapter:source0_data -> BAvoltage_s1_agent:cp_data
	wire          bavoltage_s1_burst_adapter_source0_ready;                 // BAvoltage_s1_agent:cp_ready -> BAvoltage_s1_burst_adapter:source0_ready
	wire   [12:0] bavoltage_s1_burst_adapter_source0_channel;               // BAvoltage_s1_burst_adapter:source0_channel -> BAvoltage_s1_agent:cp_channel
	wire          bavoltage_s1_burst_adapter_source0_startofpacket;         // BAvoltage_s1_burst_adapter:source0_startofpacket -> BAvoltage_s1_agent:cp_startofpacket
	wire          bavoltage_s1_burst_adapter_source0_endofpacket;           // BAvoltage_s1_burst_adapter:source0_endofpacket -> BAvoltage_s1_agent:cp_endofpacket
	wire          cmd_mux_006_src_valid;                                    // cmd_mux_006:src_valid -> VGR_current_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_006_src_data;                                     // cmd_mux_006:src_data -> VGR_current_s1_burst_adapter:sink0_data
	wire          cmd_mux_006_src_ready;                                    // VGR_current_s1_burst_adapter:sink0_ready -> cmd_mux_006:src_ready
	wire   [12:0] cmd_mux_006_src_channel;                                  // cmd_mux_006:src_channel -> VGR_current_s1_burst_adapter:sink0_channel
	wire          cmd_mux_006_src_startofpacket;                            // cmd_mux_006:src_startofpacket -> VGR_current_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_006_src_endofpacket;                              // cmd_mux_006:src_endofpacket -> VGR_current_s1_burst_adapter:sink0_endofpacket
	wire          vgr_current_s1_burst_adapter_source0_valid;               // VGR_current_s1_burst_adapter:source0_valid -> VGR_current_s1_agent:cp_valid
	wire  [117:0] vgr_current_s1_burst_adapter_source0_data;                // VGR_current_s1_burst_adapter:source0_data -> VGR_current_s1_agent:cp_data
	wire          vgr_current_s1_burst_adapter_source0_ready;               // VGR_current_s1_agent:cp_ready -> VGR_current_s1_burst_adapter:source0_ready
	wire   [12:0] vgr_current_s1_burst_adapter_source0_channel;             // VGR_current_s1_burst_adapter:source0_channel -> VGR_current_s1_agent:cp_channel
	wire          vgr_current_s1_burst_adapter_source0_startofpacket;       // VGR_current_s1_burst_adapter:source0_startofpacket -> VGR_current_s1_agent:cp_startofpacket
	wire          vgr_current_s1_burst_adapter_source0_endofpacket;         // VGR_current_s1_burst_adapter:source0_endofpacket -> VGR_current_s1_agent:cp_endofpacket
	wire          cmd_mux_007_src_valid;                                    // cmd_mux_007:src_valid -> VGS_current_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_007_src_data;                                     // cmd_mux_007:src_data -> VGS_current_s1_burst_adapter:sink0_data
	wire          cmd_mux_007_src_ready;                                    // VGS_current_s1_burst_adapter:sink0_ready -> cmd_mux_007:src_ready
	wire   [12:0] cmd_mux_007_src_channel;                                  // cmd_mux_007:src_channel -> VGS_current_s1_burst_adapter:sink0_channel
	wire          cmd_mux_007_src_startofpacket;                            // cmd_mux_007:src_startofpacket -> VGS_current_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_007_src_endofpacket;                              // cmd_mux_007:src_endofpacket -> VGS_current_s1_burst_adapter:sink0_endofpacket
	wire          vgs_current_s1_burst_adapter_source0_valid;               // VGS_current_s1_burst_adapter:source0_valid -> VGS_current_s1_agent:cp_valid
	wire  [117:0] vgs_current_s1_burst_adapter_source0_data;                // VGS_current_s1_burst_adapter:source0_data -> VGS_current_s1_agent:cp_data
	wire          vgs_current_s1_burst_adapter_source0_ready;               // VGS_current_s1_agent:cp_ready -> VGS_current_s1_burst_adapter:source0_ready
	wire   [12:0] vgs_current_s1_burst_adapter_source0_channel;             // VGS_current_s1_burst_adapter:source0_channel -> VGS_current_s1_agent:cp_channel
	wire          vgs_current_s1_burst_adapter_source0_startofpacket;       // VGS_current_s1_burst_adapter:source0_startofpacket -> VGS_current_s1_agent:cp_startofpacket
	wire          vgs_current_s1_burst_adapter_source0_endofpacket;         // VGS_current_s1_burst_adapter:source0_endofpacket -> VGS_current_s1_agent:cp_endofpacket
	wire          cmd_mux_008_src_valid;                                    // cmd_mux_008:src_valid -> VGT_current_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_008_src_data;                                     // cmd_mux_008:src_data -> VGT_current_s1_burst_adapter:sink0_data
	wire          cmd_mux_008_src_ready;                                    // VGT_current_s1_burst_adapter:sink0_ready -> cmd_mux_008:src_ready
	wire   [12:0] cmd_mux_008_src_channel;                                  // cmd_mux_008:src_channel -> VGT_current_s1_burst_adapter:sink0_channel
	wire          cmd_mux_008_src_startofpacket;                            // cmd_mux_008:src_startofpacket -> VGT_current_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_008_src_endofpacket;                              // cmd_mux_008:src_endofpacket -> VGT_current_s1_burst_adapter:sink0_endofpacket
	wire          vgt_current_s1_burst_adapter_source0_valid;               // VGT_current_s1_burst_adapter:source0_valid -> VGT_current_s1_agent:cp_valid
	wire  [117:0] vgt_current_s1_burst_adapter_source0_data;                // VGT_current_s1_burst_adapter:source0_data -> VGT_current_s1_agent:cp_data
	wire          vgt_current_s1_burst_adapter_source0_ready;               // VGT_current_s1_agent:cp_ready -> VGT_current_s1_burst_adapter:source0_ready
	wire   [12:0] vgt_current_s1_burst_adapter_source0_channel;             // VGT_current_s1_burst_adapter:source0_channel -> VGT_current_s1_agent:cp_channel
	wire          vgt_current_s1_burst_adapter_source0_startofpacket;       // VGT_current_s1_burst_adapter:source0_startofpacket -> VGT_current_s1_agent:cp_startofpacket
	wire          vgt_current_s1_burst_adapter_source0_endofpacket;         // VGT_current_s1_burst_adapter:source0_endofpacket -> VGT_current_s1_agent:cp_endofpacket
	wire          cmd_mux_009_src_valid;                                    // cmd_mux_009:src_valid -> VGR_voltage_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_009_src_data;                                     // cmd_mux_009:src_data -> VGR_voltage_s1_burst_adapter:sink0_data
	wire          cmd_mux_009_src_ready;                                    // VGR_voltage_s1_burst_adapter:sink0_ready -> cmd_mux_009:src_ready
	wire   [12:0] cmd_mux_009_src_channel;                                  // cmd_mux_009:src_channel -> VGR_voltage_s1_burst_adapter:sink0_channel
	wire          cmd_mux_009_src_startofpacket;                            // cmd_mux_009:src_startofpacket -> VGR_voltage_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_009_src_endofpacket;                              // cmd_mux_009:src_endofpacket -> VGR_voltage_s1_burst_adapter:sink0_endofpacket
	wire          vgr_voltage_s1_burst_adapter_source0_valid;               // VGR_voltage_s1_burst_adapter:source0_valid -> VGR_voltage_s1_agent:cp_valid
	wire  [117:0] vgr_voltage_s1_burst_adapter_source0_data;                // VGR_voltage_s1_burst_adapter:source0_data -> VGR_voltage_s1_agent:cp_data
	wire          vgr_voltage_s1_burst_adapter_source0_ready;               // VGR_voltage_s1_agent:cp_ready -> VGR_voltage_s1_burst_adapter:source0_ready
	wire   [12:0] vgr_voltage_s1_burst_adapter_source0_channel;             // VGR_voltage_s1_burst_adapter:source0_channel -> VGR_voltage_s1_agent:cp_channel
	wire          vgr_voltage_s1_burst_adapter_source0_startofpacket;       // VGR_voltage_s1_burst_adapter:source0_startofpacket -> VGR_voltage_s1_agent:cp_startofpacket
	wire          vgr_voltage_s1_burst_adapter_source0_endofpacket;         // VGR_voltage_s1_burst_adapter:source0_endofpacket -> VGR_voltage_s1_agent:cp_endofpacket
	wire          cmd_mux_010_src_valid;                                    // cmd_mux_010:src_valid -> VGS_voltage_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_010_src_data;                                     // cmd_mux_010:src_data -> VGS_voltage_s1_burst_adapter:sink0_data
	wire          cmd_mux_010_src_ready;                                    // VGS_voltage_s1_burst_adapter:sink0_ready -> cmd_mux_010:src_ready
	wire   [12:0] cmd_mux_010_src_channel;                                  // cmd_mux_010:src_channel -> VGS_voltage_s1_burst_adapter:sink0_channel
	wire          cmd_mux_010_src_startofpacket;                            // cmd_mux_010:src_startofpacket -> VGS_voltage_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_010_src_endofpacket;                              // cmd_mux_010:src_endofpacket -> VGS_voltage_s1_burst_adapter:sink0_endofpacket
	wire          vgs_voltage_s1_burst_adapter_source0_valid;               // VGS_voltage_s1_burst_adapter:source0_valid -> VGS_voltage_s1_agent:cp_valid
	wire  [117:0] vgs_voltage_s1_burst_adapter_source0_data;                // VGS_voltage_s1_burst_adapter:source0_data -> VGS_voltage_s1_agent:cp_data
	wire          vgs_voltage_s1_burst_adapter_source0_ready;               // VGS_voltage_s1_agent:cp_ready -> VGS_voltage_s1_burst_adapter:source0_ready
	wire   [12:0] vgs_voltage_s1_burst_adapter_source0_channel;             // VGS_voltage_s1_burst_adapter:source0_channel -> VGS_voltage_s1_agent:cp_channel
	wire          vgs_voltage_s1_burst_adapter_source0_startofpacket;       // VGS_voltage_s1_burst_adapter:source0_startofpacket -> VGS_voltage_s1_agent:cp_startofpacket
	wire          vgs_voltage_s1_burst_adapter_source0_endofpacket;         // VGS_voltage_s1_burst_adapter:source0_endofpacket -> VGS_voltage_s1_agent:cp_endofpacket
	wire          cmd_mux_011_src_valid;                                    // cmd_mux_011:src_valid -> VGT_voltage_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_011_src_data;                                     // cmd_mux_011:src_data -> VGT_voltage_s1_burst_adapter:sink0_data
	wire          cmd_mux_011_src_ready;                                    // VGT_voltage_s1_burst_adapter:sink0_ready -> cmd_mux_011:src_ready
	wire   [12:0] cmd_mux_011_src_channel;                                  // cmd_mux_011:src_channel -> VGT_voltage_s1_burst_adapter:sink0_channel
	wire          cmd_mux_011_src_startofpacket;                            // cmd_mux_011:src_startofpacket -> VGT_voltage_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_011_src_endofpacket;                              // cmd_mux_011:src_endofpacket -> VGT_voltage_s1_burst_adapter:sink0_endofpacket
	wire          vgt_voltage_s1_burst_adapter_source0_valid;               // VGT_voltage_s1_burst_adapter:source0_valid -> VGT_voltage_s1_agent:cp_valid
	wire  [117:0] vgt_voltage_s1_burst_adapter_source0_data;                // VGT_voltage_s1_burst_adapter:source0_data -> VGT_voltage_s1_agent:cp_data
	wire          vgt_voltage_s1_burst_adapter_source0_ready;               // VGT_voltage_s1_agent:cp_ready -> VGT_voltage_s1_burst_adapter:source0_ready
	wire   [12:0] vgt_voltage_s1_burst_adapter_source0_channel;             // VGT_voltage_s1_burst_adapter:source0_channel -> VGT_voltage_s1_agent:cp_channel
	wire          vgt_voltage_s1_burst_adapter_source0_startofpacket;       // VGT_voltage_s1_burst_adapter:source0_startofpacket -> VGT_voltage_s1_agent:cp_startofpacket
	wire          vgt_voltage_s1_burst_adapter_source0_endofpacket;         // VGT_voltage_s1_burst_adapter:source0_endofpacket -> VGT_voltage_s1_agent:cp_endofpacket
	wire          cmd_mux_012_src_valid;                                    // cmd_mux_012:src_valid -> phase_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_012_src_data;                                     // cmd_mux_012:src_data -> phase_s1_burst_adapter:sink0_data
	wire          cmd_mux_012_src_ready;                                    // phase_s1_burst_adapter:sink0_ready -> cmd_mux_012:src_ready
	wire   [12:0] cmd_mux_012_src_channel;                                  // cmd_mux_012:src_channel -> phase_s1_burst_adapter:sink0_channel
	wire          cmd_mux_012_src_startofpacket;                            // cmd_mux_012:src_startofpacket -> phase_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_012_src_endofpacket;                              // cmd_mux_012:src_endofpacket -> phase_s1_burst_adapter:sink0_endofpacket
	wire          phase_s1_burst_adapter_source0_valid;                     // phase_s1_burst_adapter:source0_valid -> phase_s1_agent:cp_valid
	wire  [117:0] phase_s1_burst_adapter_source0_data;                      // phase_s1_burst_adapter:source0_data -> phase_s1_agent:cp_data
	wire          phase_s1_burst_adapter_source0_ready;                     // phase_s1_agent:cp_ready -> phase_s1_burst_adapter:source0_ready
	wire   [12:0] phase_s1_burst_adapter_source0_channel;                   // phase_s1_burst_adapter:source0_channel -> phase_s1_agent:cp_channel
	wire          phase_s1_burst_adapter_source0_startofpacket;             // phase_s1_burst_adapter:source0_startofpacket -> phase_s1_agent:cp_startofpacket
	wire          phase_s1_burst_adapter_source0_endofpacket;               // phase_s1_burst_adapter:source0_endofpacket -> phase_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                     // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [117:0] cmd_demux_src0_data;                                      // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                     // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [12:0] cmd_demux_src0_channel;                                   // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                             // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                               // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                     // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [117:0] cmd_demux_src1_data;                                      // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                     // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [12:0] cmd_demux_src1_channel;                                   // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                             // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                               // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                     // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [117:0] cmd_demux_src2_data;                                      // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                     // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [12:0] cmd_demux_src2_channel;                                   // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                             // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                               // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                     // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [117:0] cmd_demux_src3_data;                                      // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                     // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [12:0] cmd_demux_src3_channel;                                   // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                             // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                               // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                     // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [117:0] cmd_demux_src4_data;                                      // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                     // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [12:0] cmd_demux_src4_channel;                                   // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                             // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                               // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                     // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [117:0] cmd_demux_src5_data;                                      // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                     // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [12:0] cmd_demux_src5_channel;                                   // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                             // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                               // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                     // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [117:0] cmd_demux_src6_data;                                      // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                     // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [12:0] cmd_demux_src6_channel;                                   // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                             // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                               // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                     // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [117:0] cmd_demux_src7_data;                                      // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                     // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [12:0] cmd_demux_src7_channel;                                   // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                             // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                               // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                     // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [117:0] cmd_demux_src8_data;                                      // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                     // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [12:0] cmd_demux_src8_channel;                                   // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                             // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                               // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                     // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [117:0] cmd_demux_src9_data;                                      // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                     // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [12:0] cmd_demux_src9_channel;                                   // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                             // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                               // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                    // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [117:0] cmd_demux_src10_data;                                     // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                    // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [12:0] cmd_demux_src10_channel;                                  // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                            // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                              // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                    // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [117:0] cmd_demux_src11_data;                                     // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                    // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [12:0] cmd_demux_src11_channel;                                  // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                            // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                              // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                    // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [117:0] cmd_demux_src12_data;                                     // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_src12_ready;                                    // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire   [12:0] cmd_demux_src12_channel;                                  // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_startofpacket;                            // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_src12_endofpacket;                              // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                 // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [117:0] cmd_demux_001_src0_data;                                  // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                 // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire   [12:0] cmd_demux_001_src0_channel;                               // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                         // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                           // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                 // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [117:0] cmd_demux_001_src1_data;                                  // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                 // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire   [12:0] cmd_demux_001_src1_channel;                               // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                         // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                           // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                 // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [117:0] cmd_demux_001_src2_data;                                  // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                 // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire   [12:0] cmd_demux_001_src2_channel;                               // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                         // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                           // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                 // cmd_demux_001:src3_valid -> cmd_mux_003:sink1_valid
	wire  [117:0] cmd_demux_001_src3_data;                                  // cmd_demux_001:src3_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src3_ready;                                 // cmd_mux_003:sink1_ready -> cmd_demux_001:src3_ready
	wire   [12:0] cmd_demux_001_src3_channel;                               // cmd_demux_001:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                         // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                           // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                 // cmd_demux_001:src4_valid -> cmd_mux_004:sink1_valid
	wire  [117:0] cmd_demux_001_src4_data;                                  // cmd_demux_001:src4_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src4_ready;                                 // cmd_mux_004:sink1_ready -> cmd_demux_001:src4_ready
	wire   [12:0] cmd_demux_001_src4_channel;                               // cmd_demux_001:src4_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                         // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                           // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                 // cmd_demux_001:src5_valid -> cmd_mux_005:sink1_valid
	wire  [117:0] cmd_demux_001_src5_data;                                  // cmd_demux_001:src5_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_001_src5_ready;                                 // cmd_mux_005:sink1_ready -> cmd_demux_001:src5_ready
	wire   [12:0] cmd_demux_001_src5_channel;                               // cmd_demux_001:src5_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src5_startofpacket;                         // cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                           // cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_001_src6_valid;                                 // cmd_demux_001:src6_valid -> cmd_mux_006:sink1_valid
	wire  [117:0] cmd_demux_001_src6_data;                                  // cmd_demux_001:src6_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_001_src6_ready;                                 // cmd_mux_006:sink1_ready -> cmd_demux_001:src6_ready
	wire   [12:0] cmd_demux_001_src6_channel;                               // cmd_demux_001:src6_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_001_src6_startofpacket;                         // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                           // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_001_src7_valid;                                 // cmd_demux_001:src7_valid -> cmd_mux_007:sink1_valid
	wire  [117:0] cmd_demux_001_src7_data;                                  // cmd_demux_001:src7_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_001_src7_ready;                                 // cmd_mux_007:sink1_ready -> cmd_demux_001:src7_ready
	wire   [12:0] cmd_demux_001_src7_channel;                               // cmd_demux_001:src7_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_001_src7_startofpacket;                         // cmd_demux_001:src7_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                           // cmd_demux_001:src7_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_001_src8_valid;                                 // cmd_demux_001:src8_valid -> cmd_mux_008:sink1_valid
	wire  [117:0] cmd_demux_001_src8_data;                                  // cmd_demux_001:src8_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_001_src8_ready;                                 // cmd_mux_008:sink1_ready -> cmd_demux_001:src8_ready
	wire   [12:0] cmd_demux_001_src8_channel;                               // cmd_demux_001:src8_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_001_src8_startofpacket;                         // cmd_demux_001:src8_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                           // cmd_demux_001:src8_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_001_src9_valid;                                 // cmd_demux_001:src9_valid -> cmd_mux_009:sink1_valid
	wire  [117:0] cmd_demux_001_src9_data;                                  // cmd_demux_001:src9_data -> cmd_mux_009:sink1_data
	wire          cmd_demux_001_src9_ready;                                 // cmd_mux_009:sink1_ready -> cmd_demux_001:src9_ready
	wire   [12:0] cmd_demux_001_src9_channel;                               // cmd_demux_001:src9_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_001_src9_startofpacket;                         // cmd_demux_001:src9_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          cmd_demux_001_src9_endofpacket;                           // cmd_demux_001:src9_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_001_src10_valid;                                // cmd_demux_001:src10_valid -> cmd_mux_010:sink1_valid
	wire  [117:0] cmd_demux_001_src10_data;                                 // cmd_demux_001:src10_data -> cmd_mux_010:sink1_data
	wire          cmd_demux_001_src10_ready;                                // cmd_mux_010:sink1_ready -> cmd_demux_001:src10_ready
	wire   [12:0] cmd_demux_001_src10_channel;                              // cmd_demux_001:src10_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_001_src10_startofpacket;                        // cmd_demux_001:src10_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          cmd_demux_001_src10_endofpacket;                          // cmd_demux_001:src10_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_001_src11_valid;                                // cmd_demux_001:src11_valid -> cmd_mux_011:sink1_valid
	wire  [117:0] cmd_demux_001_src11_data;                                 // cmd_demux_001:src11_data -> cmd_mux_011:sink1_data
	wire          cmd_demux_001_src11_ready;                                // cmd_mux_011:sink1_ready -> cmd_demux_001:src11_ready
	wire   [12:0] cmd_demux_001_src11_channel;                              // cmd_demux_001:src11_channel -> cmd_mux_011:sink1_channel
	wire          cmd_demux_001_src11_startofpacket;                        // cmd_demux_001:src11_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire          cmd_demux_001_src11_endofpacket;                          // cmd_demux_001:src11_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          cmd_demux_001_src12_valid;                                // cmd_demux_001:src12_valid -> cmd_mux_012:sink1_valid
	wire  [117:0] cmd_demux_001_src12_data;                                 // cmd_demux_001:src12_data -> cmd_mux_012:sink1_data
	wire          cmd_demux_001_src12_ready;                                // cmd_mux_012:sink1_ready -> cmd_demux_001:src12_ready
	wire   [12:0] cmd_demux_001_src12_channel;                              // cmd_demux_001:src12_channel -> cmd_mux_012:sink1_channel
	wire          cmd_demux_001_src12_startofpacket;                        // cmd_demux_001:src12_startofpacket -> cmd_mux_012:sink1_startofpacket
	wire          cmd_demux_001_src12_endofpacket;                          // cmd_demux_001:src12_endofpacket -> cmd_mux_012:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                     // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [117:0] rsp_demux_src0_data;                                      // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                     // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [12:0] rsp_demux_src0_channel;                                   // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                             // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                               // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                     // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [117:0] rsp_demux_src1_data;                                      // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                     // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire   [12:0] rsp_demux_src1_channel;                                   // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                             // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                               // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                 // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [117:0] rsp_demux_001_src0_data;                                  // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                 // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [12:0] rsp_demux_001_src0_channel;                               // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                         // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                           // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                 // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [117:0] rsp_demux_001_src1_data;                                  // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                 // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire   [12:0] rsp_demux_001_src1_channel;                               // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                         // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                           // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                 // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [117:0] rsp_demux_002_src0_data;                                  // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                 // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [12:0] rsp_demux_002_src0_channel;                               // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                         // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                           // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                 // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [117:0] rsp_demux_002_src1_data;                                  // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                 // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire   [12:0] rsp_demux_002_src1_channel;                               // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                         // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                           // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                 // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [117:0] rsp_demux_003_src0_data;                                  // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                 // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [12:0] rsp_demux_003_src0_channel;                               // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                         // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                           // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                 // rsp_demux_003:src1_valid -> rsp_mux_001:sink3_valid
	wire  [117:0] rsp_demux_003_src1_data;                                  // rsp_demux_003:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src1_ready;                                 // rsp_mux_001:sink3_ready -> rsp_demux_003:src1_ready
	wire   [12:0] rsp_demux_003_src1_channel;                               // rsp_demux_003:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src1_startofpacket;                         // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                           // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                 // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [117:0] rsp_demux_004_src0_data;                                  // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                 // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [12:0] rsp_demux_004_src0_channel;                               // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                         // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                           // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                 // rsp_demux_004:src1_valid -> rsp_mux_001:sink4_valid
	wire  [117:0] rsp_demux_004_src1_data;                                  // rsp_demux_004:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src1_ready;                                 // rsp_mux_001:sink4_ready -> rsp_demux_004:src1_ready
	wire   [12:0] rsp_demux_004_src1_channel;                               // rsp_demux_004:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src1_startofpacket;                         // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                           // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                 // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [117:0] rsp_demux_005_src0_data;                                  // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                 // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [12:0] rsp_demux_005_src0_channel;                               // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                         // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                           // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                 // rsp_demux_005:src1_valid -> rsp_mux_001:sink5_valid
	wire  [117:0] rsp_demux_005_src1_data;                                  // rsp_demux_005:src1_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_005_src1_ready;                                 // rsp_mux_001:sink5_ready -> rsp_demux_005:src1_ready
	wire   [12:0] rsp_demux_005_src1_channel;                               // rsp_demux_005:src1_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_005_src1_startofpacket;                         // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                           // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                 // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [117:0] rsp_demux_006_src0_data;                                  // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                 // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [12:0] rsp_demux_006_src0_channel;                               // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                         // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                           // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                 // rsp_demux_006:src1_valid -> rsp_mux_001:sink6_valid
	wire  [117:0] rsp_demux_006_src1_data;                                  // rsp_demux_006:src1_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_006_src1_ready;                                 // rsp_mux_001:sink6_ready -> rsp_demux_006:src1_ready
	wire   [12:0] rsp_demux_006_src1_channel;                               // rsp_demux_006:src1_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_006_src1_startofpacket;                         // rsp_demux_006:src1_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                           // rsp_demux_006:src1_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                 // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [117:0] rsp_demux_007_src0_data;                                  // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                 // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [12:0] rsp_demux_007_src0_channel;                               // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                         // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                           // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                 // rsp_demux_007:src1_valid -> rsp_mux_001:sink7_valid
	wire  [117:0] rsp_demux_007_src1_data;                                  // rsp_demux_007:src1_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_007_src1_ready;                                 // rsp_mux_001:sink7_ready -> rsp_demux_007:src1_ready
	wire   [12:0] rsp_demux_007_src1_channel;                               // rsp_demux_007:src1_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_007_src1_startofpacket;                         // rsp_demux_007:src1_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                           // rsp_demux_007:src1_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                 // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [117:0] rsp_demux_008_src0_data;                                  // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                 // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [12:0] rsp_demux_008_src0_channel;                               // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                         // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                           // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                 // rsp_demux_008:src1_valid -> rsp_mux_001:sink8_valid
	wire  [117:0] rsp_demux_008_src1_data;                                  // rsp_demux_008:src1_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_008_src1_ready;                                 // rsp_mux_001:sink8_ready -> rsp_demux_008:src1_ready
	wire   [12:0] rsp_demux_008_src1_channel;                               // rsp_demux_008:src1_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_008_src1_startofpacket;                         // rsp_demux_008:src1_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                           // rsp_demux_008:src1_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                 // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [117:0] rsp_demux_009_src0_data;                                  // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                 // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [12:0] rsp_demux_009_src0_channel;                               // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                         // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                           // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_009_src1_valid;                                 // rsp_demux_009:src1_valid -> rsp_mux_001:sink9_valid
	wire  [117:0] rsp_demux_009_src1_data;                                  // rsp_demux_009:src1_data -> rsp_mux_001:sink9_data
	wire          rsp_demux_009_src1_ready;                                 // rsp_mux_001:sink9_ready -> rsp_demux_009:src1_ready
	wire   [12:0] rsp_demux_009_src1_channel;                               // rsp_demux_009:src1_channel -> rsp_mux_001:sink9_channel
	wire          rsp_demux_009_src1_startofpacket;                         // rsp_demux_009:src1_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                           // rsp_demux_009:src1_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                 // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [117:0] rsp_demux_010_src0_data;                                  // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                 // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [12:0] rsp_demux_010_src0_channel;                               // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                         // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                           // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_010_src1_valid;                                 // rsp_demux_010:src1_valid -> rsp_mux_001:sink10_valid
	wire  [117:0] rsp_demux_010_src1_data;                                  // rsp_demux_010:src1_data -> rsp_mux_001:sink10_data
	wire          rsp_demux_010_src1_ready;                                 // rsp_mux_001:sink10_ready -> rsp_demux_010:src1_ready
	wire   [12:0] rsp_demux_010_src1_channel;                               // rsp_demux_010:src1_channel -> rsp_mux_001:sink10_channel
	wire          rsp_demux_010_src1_startofpacket;                         // rsp_demux_010:src1_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                           // rsp_demux_010:src1_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                 // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [117:0] rsp_demux_011_src0_data;                                  // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                 // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [12:0] rsp_demux_011_src0_channel;                               // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                         // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                           // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_011_src1_valid;                                 // rsp_demux_011:src1_valid -> rsp_mux_001:sink11_valid
	wire  [117:0] rsp_demux_011_src1_data;                                  // rsp_demux_011:src1_data -> rsp_mux_001:sink11_data
	wire          rsp_demux_011_src1_ready;                                 // rsp_mux_001:sink11_ready -> rsp_demux_011:src1_ready
	wire   [12:0] rsp_demux_011_src1_channel;                               // rsp_demux_011:src1_channel -> rsp_mux_001:sink11_channel
	wire          rsp_demux_011_src1_startofpacket;                         // rsp_demux_011:src1_startofpacket -> rsp_mux_001:sink11_startofpacket
	wire          rsp_demux_011_src1_endofpacket;                           // rsp_demux_011:src1_endofpacket -> rsp_mux_001:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                 // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [117:0] rsp_demux_012_src0_data;                                  // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire          rsp_demux_012_src0_ready;                                 // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire   [12:0] rsp_demux_012_src0_channel;                               // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                         // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                           // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_012_src1_valid;                                 // rsp_demux_012:src1_valid -> rsp_mux_001:sink12_valid
	wire  [117:0] rsp_demux_012_src1_data;                                  // rsp_demux_012:src1_data -> rsp_mux_001:sink12_data
	wire          rsp_demux_012_src1_ready;                                 // rsp_mux_001:sink12_ready -> rsp_demux_012:src1_ready
	wire   [12:0] rsp_demux_012_src1_channel;                               // rsp_demux_012:src1_channel -> rsp_mux_001:sink12_channel
	wire          rsp_demux_012_src1_startofpacket;                         // rsp_demux_012:src1_startofpacket -> rsp_mux_001:sink12_startofpacket
	wire          rsp_demux_012_src1_endofpacket;                           // rsp_demux_012:src1_endofpacket -> rsp_mux_001:sink12_endofpacket
	wire   [12:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data;        // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [12:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data;        // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          sw_s1_agent_rdata_fifo_out_valid;                         // sw_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] sw_s1_agent_rdata_fifo_out_data;                          // sw_s1_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          sw_s1_agent_rdata_fifo_out_ready;                         // avalon_st_adapter:in_0_ready -> sw_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                            // avalon_st_adapter:out_0_valid -> sw_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                             // avalon_st_adapter:out_0_data -> sw_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                            // sw_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                            // avalon_st_adapter:out_0_error -> sw_s1_agent:rdata_fifo_sink_error
	wire          led_s1_agent_rdata_fifo_out_valid;                        // led_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] led_s1_agent_rdata_fifo_out_data;                         // led_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          led_s1_agent_rdata_fifo_out_ready;                        // avalon_st_adapter_001:in_0_ready -> led_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                        // avalon_st_adapter_001:out_0_valid -> led_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                         // avalon_st_adapter_001:out_0_data -> led_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                        // led_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                        // avalon_st_adapter_001:out_0_error -> led_s1_agent:rdata_fifo_sink_error
	wire          pvcurrent_s1_agent_rdata_fifo_out_valid;                  // PVcurrent_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] pvcurrent_s1_agent_rdata_fifo_out_data;                   // PVcurrent_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          pvcurrent_s1_agent_rdata_fifo_out_ready;                  // avalon_st_adapter_002:in_0_ready -> PVcurrent_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                        // avalon_st_adapter_002:out_0_valid -> PVcurrent_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                         // avalon_st_adapter_002:out_0_data -> PVcurrent_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                        // PVcurrent_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                        // avalon_st_adapter_002:out_0_error -> PVcurrent_s1_agent:rdata_fifo_sink_error
	wire          pvvoltage_s1_agent_rdata_fifo_out_valid;                  // PVvoltage_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] pvvoltage_s1_agent_rdata_fifo_out_data;                   // PVvoltage_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          pvvoltage_s1_agent_rdata_fifo_out_ready;                  // avalon_st_adapter_003:in_0_ready -> PVvoltage_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                        // avalon_st_adapter_003:out_0_valid -> PVvoltage_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                         // avalon_st_adapter_003:out_0_data -> PVvoltage_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                        // PVvoltage_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                        // avalon_st_adapter_003:out_0_error -> PVvoltage_s1_agent:rdata_fifo_sink_error
	wire          bacurrent_s1_agent_rdata_fifo_out_valid;                  // BAcurrent_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] bacurrent_s1_agent_rdata_fifo_out_data;                   // BAcurrent_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          bacurrent_s1_agent_rdata_fifo_out_ready;                  // avalon_st_adapter_004:in_0_ready -> BAcurrent_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                        // avalon_st_adapter_004:out_0_valid -> BAcurrent_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                         // avalon_st_adapter_004:out_0_data -> BAcurrent_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                        // BAcurrent_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                        // avalon_st_adapter_004:out_0_error -> BAcurrent_s1_agent:rdata_fifo_sink_error
	wire          bavoltage_s1_agent_rdata_fifo_out_valid;                  // BAvoltage_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] bavoltage_s1_agent_rdata_fifo_out_data;                   // BAvoltage_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          bavoltage_s1_agent_rdata_fifo_out_ready;                  // avalon_st_adapter_005:in_0_ready -> BAvoltage_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                        // avalon_st_adapter_005:out_0_valid -> BAvoltage_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                         // avalon_st_adapter_005:out_0_data -> BAvoltage_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                        // BAvoltage_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                        // avalon_st_adapter_005:out_0_error -> BAvoltage_s1_agent:rdata_fifo_sink_error
	wire          vgr_current_s1_agent_rdata_fifo_out_valid;                // VGR_current_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] vgr_current_s1_agent_rdata_fifo_out_data;                 // VGR_current_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          vgr_current_s1_agent_rdata_fifo_out_ready;                // avalon_st_adapter_006:in_0_ready -> VGR_current_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                        // avalon_st_adapter_006:out_0_valid -> VGR_current_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                         // avalon_st_adapter_006:out_0_data -> VGR_current_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                        // VGR_current_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                        // avalon_st_adapter_006:out_0_error -> VGR_current_s1_agent:rdata_fifo_sink_error
	wire          vgs_current_s1_agent_rdata_fifo_out_valid;                // VGS_current_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] vgs_current_s1_agent_rdata_fifo_out_data;                 // VGS_current_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          vgs_current_s1_agent_rdata_fifo_out_ready;                // avalon_st_adapter_007:in_0_ready -> VGS_current_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                        // avalon_st_adapter_007:out_0_valid -> VGS_current_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                         // avalon_st_adapter_007:out_0_data -> VGS_current_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                        // VGS_current_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                        // avalon_st_adapter_007:out_0_error -> VGS_current_s1_agent:rdata_fifo_sink_error
	wire          vgt_current_s1_agent_rdata_fifo_out_valid;                // VGT_current_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] vgt_current_s1_agent_rdata_fifo_out_data;                 // VGT_current_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          vgt_current_s1_agent_rdata_fifo_out_ready;                // avalon_st_adapter_008:in_0_ready -> VGT_current_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                        // avalon_st_adapter_008:out_0_valid -> VGT_current_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                         // avalon_st_adapter_008:out_0_data -> VGT_current_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                        // VGT_current_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                        // avalon_st_adapter_008:out_0_error -> VGT_current_s1_agent:rdata_fifo_sink_error
	wire          vgr_voltage_s1_agent_rdata_fifo_out_valid;                // VGR_voltage_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] vgr_voltage_s1_agent_rdata_fifo_out_data;                 // VGR_voltage_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          vgr_voltage_s1_agent_rdata_fifo_out_ready;                // avalon_st_adapter_009:in_0_ready -> VGR_voltage_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                        // avalon_st_adapter_009:out_0_valid -> VGR_voltage_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                         // avalon_st_adapter_009:out_0_data -> VGR_voltage_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                        // VGR_voltage_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                        // avalon_st_adapter_009:out_0_error -> VGR_voltage_s1_agent:rdata_fifo_sink_error
	wire          vgs_voltage_s1_agent_rdata_fifo_out_valid;                // VGS_voltage_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] vgs_voltage_s1_agent_rdata_fifo_out_data;                 // VGS_voltage_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire          vgs_voltage_s1_agent_rdata_fifo_out_ready;                // avalon_st_adapter_010:in_0_ready -> VGS_voltage_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_010_out_0_valid;                        // avalon_st_adapter_010:out_0_valid -> VGS_voltage_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                         // avalon_st_adapter_010:out_0_data -> VGS_voltage_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                        // VGS_voltage_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                        // avalon_st_adapter_010:out_0_error -> VGS_voltage_s1_agent:rdata_fifo_sink_error
	wire          vgt_voltage_s1_agent_rdata_fifo_out_valid;                // VGT_voltage_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] vgt_voltage_s1_agent_rdata_fifo_out_data;                 // VGT_voltage_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_011:in_0_data
	wire          vgt_voltage_s1_agent_rdata_fifo_out_ready;                // avalon_st_adapter_011:in_0_ready -> VGT_voltage_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_011_out_0_valid;                        // avalon_st_adapter_011:out_0_valid -> VGT_voltage_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                         // avalon_st_adapter_011:out_0_data -> VGT_voltage_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                        // VGT_voltage_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                        // avalon_st_adapter_011:out_0_error -> VGT_voltage_s1_agent:rdata_fifo_sink_error
	wire          phase_s1_agent_rdata_fifo_out_valid;                      // phase_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] phase_s1_agent_rdata_fifo_out_data;                       // phase_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_012:in_0_data
	wire          phase_s1_agent_rdata_fifo_out_ready;                      // avalon_st_adapter_012:in_0_ready -> phase_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_012_out_0_valid;                        // avalon_st_adapter_012:out_0_valid -> phase_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                         // avalon_st_adapter_012:out_0_data -> phase_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                        // phase_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                        // avalon_st_adapter_012:out_0_error -> phase_s1_agent:rdata_fifo_sink_error

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sw_s1_translator (
		.clk                    (clk_50_clk_clk),                       //                      clk.clk
		.reset                  (sw_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sw_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (sw_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (sw_s1_agent_m0_read),                  //                         .read
		.uav_write              (sw_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (sw_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (sw_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (sw_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (sw_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (sw_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (sw_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (sw_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (sw_s1_address),                        //      avalon_anti_slave_0.address
		.av_readdata            (sw_s1_readdata),                       //                         .readdata
		.av_write               (),                                     //              (terminated)
		.av_read                (),                                     //              (terminated)
		.av_writedata           (),                                     //              (terminated)
		.av_begintransfer       (),                                     //              (terminated)
		.av_beginbursttransfer  (),                                     //              (terminated)
		.av_burstcount          (),                                     //              (terminated)
		.av_byteenable          (),                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                 //              (terminated)
		.av_waitrequest         (1'b0),                                 //              (terminated)
		.av_writebyteenable     (),                                     //              (terminated)
		.av_lock                (),                                     //              (terminated)
		.av_chipselect          (),                                     //              (terminated)
		.av_clken               (),                                     //              (terminated)
		.uav_clken              (1'b0),                                 //              (terminated)
		.av_debugaccess         (),                                     //              (terminated)
		.av_outputenable        (),                                     //              (terminated)
		.uav_response           (),                                     //              (terminated)
		.av_response            (2'b00),                                //              (terminated)
		.uav_writeresponsevalid (),                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_s1_translator (
		.clk                    (clk_50_clk_clk),                       //                      clk.clk
		.reset                  (sw_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (led_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (led_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (led_s1_agent_m0_read),                 //                         .read
		.uav_write              (led_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (led_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (led_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (led_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (led_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (led_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (led_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (led_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (led_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (led_s1_write),                         //                         .write
		.av_readdata            (led_s1_readdata),                      //                         .readdata
		.av_writedata           (led_s1_writedata),                     //                         .writedata
		.av_chipselect          (led_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                     //              (terminated)
		.av_begintransfer       (),                                     //              (terminated)
		.av_beginbursttransfer  (),                                     //              (terminated)
		.av_burstcount          (),                                     //              (terminated)
		.av_byteenable          (),                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                 //              (terminated)
		.av_waitrequest         (1'b0),                                 //              (terminated)
		.av_writebyteenable     (),                                     //              (terminated)
		.av_lock                (),                                     //              (terminated)
		.av_clken               (),                                     //              (terminated)
		.uav_clken              (1'b0),                                 //              (terminated)
		.av_debugaccess         (),                                     //              (terminated)
		.av_outputenable        (),                                     //              (terminated)
		.uav_response           (),                                     //              (terminated)
		.av_response            (2'b00),                                //              (terminated)
		.uav_writeresponsevalid (),                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pvcurrent_s1_translator (
		.clk                    (clk_50_clk_clk),                       //                      clk.clk
		.reset                  (sw_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pvcurrent_s1_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (pvcurrent_s1_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (pvcurrent_s1_agent_m0_read),           //                         .read
		.uav_write              (pvcurrent_s1_agent_m0_write),          //                         .write
		.uav_waitrequest        (pvcurrent_s1_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (pvcurrent_s1_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (pvcurrent_s1_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (pvcurrent_s1_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (pvcurrent_s1_agent_m0_writedata),      //                         .writedata
		.uav_lock               (pvcurrent_s1_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (pvcurrent_s1_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (PVcurrent_s1_address),                 //      avalon_anti_slave_0.address
		.av_readdata            (PVcurrent_s1_readdata),                //                         .readdata
		.av_write               (),                                     //              (terminated)
		.av_read                (),                                     //              (terminated)
		.av_writedata           (),                                     //              (terminated)
		.av_begintransfer       (),                                     //              (terminated)
		.av_beginbursttransfer  (),                                     //              (terminated)
		.av_burstcount          (),                                     //              (terminated)
		.av_byteenable          (),                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                 //              (terminated)
		.av_waitrequest         (1'b0),                                 //              (terminated)
		.av_writebyteenable     (),                                     //              (terminated)
		.av_lock                (),                                     //              (terminated)
		.av_chipselect          (),                                     //              (terminated)
		.av_clken               (),                                     //              (terminated)
		.uav_clken              (1'b0),                                 //              (terminated)
		.av_debugaccess         (),                                     //              (terminated)
		.av_outputenable        (),                                     //              (terminated)
		.uav_response           (),                                     //              (terminated)
		.av_response            (2'b00),                                //              (terminated)
		.uav_writeresponsevalid (),                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pvvoltage_s1_translator (
		.clk                    (clk_50_clk_clk),                       //                      clk.clk
		.reset                  (sw_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pvvoltage_s1_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (pvvoltage_s1_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (pvvoltage_s1_agent_m0_read),           //                         .read
		.uav_write              (pvvoltage_s1_agent_m0_write),          //                         .write
		.uav_waitrequest        (pvvoltage_s1_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (pvvoltage_s1_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (pvvoltage_s1_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (pvvoltage_s1_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (pvvoltage_s1_agent_m0_writedata),      //                         .writedata
		.uav_lock               (pvvoltage_s1_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (pvvoltage_s1_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (PVvoltage_s1_address),                 //      avalon_anti_slave_0.address
		.av_readdata            (PVvoltage_s1_readdata),                //                         .readdata
		.av_write               (),                                     //              (terminated)
		.av_read                (),                                     //              (terminated)
		.av_writedata           (),                                     //              (terminated)
		.av_begintransfer       (),                                     //              (terminated)
		.av_beginbursttransfer  (),                                     //              (terminated)
		.av_burstcount          (),                                     //              (terminated)
		.av_byteenable          (),                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                 //              (terminated)
		.av_waitrequest         (1'b0),                                 //              (terminated)
		.av_writebyteenable     (),                                     //              (terminated)
		.av_lock                (),                                     //              (terminated)
		.av_chipselect          (),                                     //              (terminated)
		.av_clken               (),                                     //              (terminated)
		.uav_clken              (1'b0),                                 //              (terminated)
		.av_debugaccess         (),                                     //              (terminated)
		.av_outputenable        (),                                     //              (terminated)
		.uav_response           (),                                     //              (terminated)
		.av_response            (2'b00),                                //              (terminated)
		.uav_writeresponsevalid (),                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) bacurrent_s1_translator (
		.clk                    (clk_50_clk_clk),                       //                      clk.clk
		.reset                  (sw_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (bacurrent_s1_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (bacurrent_s1_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (bacurrent_s1_agent_m0_read),           //                         .read
		.uav_write              (bacurrent_s1_agent_m0_write),          //                         .write
		.uav_waitrequest        (bacurrent_s1_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (bacurrent_s1_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (bacurrent_s1_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (bacurrent_s1_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (bacurrent_s1_agent_m0_writedata),      //                         .writedata
		.uav_lock               (bacurrent_s1_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (bacurrent_s1_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (BAcurrent_s1_address),                 //      avalon_anti_slave_0.address
		.av_readdata            (BAcurrent_s1_readdata),                //                         .readdata
		.av_write               (),                                     //              (terminated)
		.av_read                (),                                     //              (terminated)
		.av_writedata           (),                                     //              (terminated)
		.av_begintransfer       (),                                     //              (terminated)
		.av_beginbursttransfer  (),                                     //              (terminated)
		.av_burstcount          (),                                     //              (terminated)
		.av_byteenable          (),                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                 //              (terminated)
		.av_waitrequest         (1'b0),                                 //              (terminated)
		.av_writebyteenable     (),                                     //              (terminated)
		.av_lock                (),                                     //              (terminated)
		.av_chipselect          (),                                     //              (terminated)
		.av_clken               (),                                     //              (terminated)
		.uav_clken              (1'b0),                                 //              (terminated)
		.av_debugaccess         (),                                     //              (terminated)
		.av_outputenable        (),                                     //              (terminated)
		.uav_response           (),                                     //              (terminated)
		.av_response            (2'b00),                                //              (terminated)
		.uav_writeresponsevalid (),                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) bavoltage_s1_translator (
		.clk                    (clk_50_clk_clk),                       //                      clk.clk
		.reset                  (sw_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (bavoltage_s1_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (bavoltage_s1_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (bavoltage_s1_agent_m0_read),           //                         .read
		.uav_write              (bavoltage_s1_agent_m0_write),          //                         .write
		.uav_waitrequest        (bavoltage_s1_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (bavoltage_s1_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (bavoltage_s1_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (bavoltage_s1_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (bavoltage_s1_agent_m0_writedata),      //                         .writedata
		.uav_lock               (bavoltage_s1_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (bavoltage_s1_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (BAvoltage_s1_address),                 //      avalon_anti_slave_0.address
		.av_readdata            (BAvoltage_s1_readdata),                //                         .readdata
		.av_write               (),                                     //              (terminated)
		.av_read                (),                                     //              (terminated)
		.av_writedata           (),                                     //              (terminated)
		.av_begintransfer       (),                                     //              (terminated)
		.av_beginbursttransfer  (),                                     //              (terminated)
		.av_burstcount          (),                                     //              (terminated)
		.av_byteenable          (),                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                 //              (terminated)
		.av_waitrequest         (1'b0),                                 //              (terminated)
		.av_writebyteenable     (),                                     //              (terminated)
		.av_lock                (),                                     //              (terminated)
		.av_chipselect          (),                                     //              (terminated)
		.av_clken               (),                                     //              (terminated)
		.uav_clken              (1'b0),                                 //              (terminated)
		.av_debugaccess         (),                                     //              (terminated)
		.av_outputenable        (),                                     //              (terminated)
		.uav_response           (),                                     //              (terminated)
		.av_response            (2'b00),                                //              (terminated)
		.uav_writeresponsevalid (),                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vgr_current_s1_translator (
		.clk                    (clk_50_clk_clk),                        //                      clk.clk
		.reset                  (sw_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (vgr_current_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (vgr_current_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (vgr_current_s1_agent_m0_read),          //                         .read
		.uav_write              (vgr_current_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (vgr_current_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (vgr_current_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (vgr_current_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (vgr_current_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (vgr_current_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (vgr_current_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (vgr_current_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (VGR_current_s1_address),                //      avalon_anti_slave_0.address
		.av_readdata            (VGR_current_s1_readdata),               //                         .readdata
		.av_write               (),                                      //              (terminated)
		.av_read                (),                                      //              (terminated)
		.av_writedata           (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_chipselect          (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vgs_current_s1_translator (
		.clk                    (clk_50_clk_clk),                        //                      clk.clk
		.reset                  (sw_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (vgs_current_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (vgs_current_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (vgs_current_s1_agent_m0_read),          //                         .read
		.uav_write              (vgs_current_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (vgs_current_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (vgs_current_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (vgs_current_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (vgs_current_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (vgs_current_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (vgs_current_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (vgs_current_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (VGS_current_s1_address),                //      avalon_anti_slave_0.address
		.av_readdata            (VGS_current_s1_readdata),               //                         .readdata
		.av_write               (),                                      //              (terminated)
		.av_read                (),                                      //              (terminated)
		.av_writedata           (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_chipselect          (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vgt_current_s1_translator (
		.clk                    (clk_50_clk_clk),                        //                      clk.clk
		.reset                  (sw_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (vgt_current_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (vgt_current_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (vgt_current_s1_agent_m0_read),          //                         .read
		.uav_write              (vgt_current_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (vgt_current_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (vgt_current_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (vgt_current_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (vgt_current_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (vgt_current_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (vgt_current_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (vgt_current_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (VGT_current_s1_address),                //      avalon_anti_slave_0.address
		.av_readdata            (VGT_current_s1_readdata),               //                         .readdata
		.av_write               (),                                      //              (terminated)
		.av_read                (),                                      //              (terminated)
		.av_writedata           (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_chipselect          (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vgr_voltage_s1_translator (
		.clk                    (clk_50_clk_clk),                        //                      clk.clk
		.reset                  (sw_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (vgr_voltage_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (vgr_voltage_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (vgr_voltage_s1_agent_m0_read),          //                         .read
		.uav_write              (vgr_voltage_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (vgr_voltage_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (vgr_voltage_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (vgr_voltage_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (vgr_voltage_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (vgr_voltage_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (vgr_voltage_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (vgr_voltage_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (VGR_voltage_s1_address),                //      avalon_anti_slave_0.address
		.av_readdata            (VGR_voltage_s1_readdata),               //                         .readdata
		.av_write               (),                                      //              (terminated)
		.av_read                (),                                      //              (terminated)
		.av_writedata           (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_chipselect          (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vgs_voltage_s1_translator (
		.clk                    (clk_50_clk_clk),                        //                      clk.clk
		.reset                  (sw_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (vgs_voltage_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (vgs_voltage_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (vgs_voltage_s1_agent_m0_read),          //                         .read
		.uav_write              (vgs_voltage_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (vgs_voltage_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (vgs_voltage_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (vgs_voltage_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (vgs_voltage_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (vgs_voltage_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (vgs_voltage_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (vgs_voltage_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (VGS_voltage_s1_address),                //      avalon_anti_slave_0.address
		.av_readdata            (VGS_voltage_s1_readdata),               //                         .readdata
		.av_write               (),                                      //              (terminated)
		.av_read                (),                                      //              (terminated)
		.av_writedata           (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_chipselect          (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vgt_voltage_s1_translator (
		.clk                    (clk_50_clk_clk),                        //                      clk.clk
		.reset                  (sw_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (vgt_voltage_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (vgt_voltage_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (vgt_voltage_s1_agent_m0_read),          //                         .read
		.uav_write              (vgt_voltage_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (vgt_voltage_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (vgt_voltage_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (vgt_voltage_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (vgt_voltage_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (vgt_voltage_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (vgt_voltage_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (vgt_voltage_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (VGT_voltage_s1_address),                //      avalon_anti_slave_0.address
		.av_readdata            (VGT_voltage_s1_readdata),               //                         .readdata
		.av_write               (),                                      //              (terminated)
		.av_read                (),                                      //              (terminated)
		.av_writedata           (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_chipselect          (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) phase_s1_translator (
		.clk                    (clk_50_clk_clk),                       //                      clk.clk
		.reset                  (sw_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (phase_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (phase_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (phase_s1_agent_m0_read),               //                         .read
		.uav_write              (phase_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (phase_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (phase_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (phase_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (phase_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (phase_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (phase_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (phase_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (phase_s1_address),                     //      avalon_anti_slave_0.address
		.av_write               (phase_s1_write),                       //                         .write
		.av_readdata            (phase_s1_readdata),                    //                         .readdata
		.av_writedata           (phase_s1_writedata),                   //                         .writedata
		.av_chipselect          (phase_s1_chipselect),                  //                         .chipselect
		.av_read                (),                                     //              (terminated)
		.av_begintransfer       (),                                     //              (terminated)
		.av_beginbursttransfer  (),                                     //              (terminated)
		.av_burstcount          (),                                     //              (terminated)
		.av_byteenable          (),                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                 //              (terminated)
		.av_waitrequest         (1'b0),                                 //              (terminated)
		.av_writebyteenable     (),                                     //              (terminated)
		.av_lock                (),                                     //              (terminated)
		.av_clken               (),                                     //              (terminated)
		.uav_clken              (1'b0),                                 //              (terminated)
		.av_debugaccess         (),                                     //              (terminated)
		.av_outputenable        (),                                     //              (terminated)
		.uav_response           (),                                     //              (terminated)
		.av_response            (2'b00),                                //              (terminated)
		.uav_writeresponsevalid (),                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                  //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (84),
		.PKT_CACHE_H               (112),
		.PKT_CACHE_L               (109),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_THREAD_ID_H           (105),
		.PKT_THREAD_ID_L           (94),
		.PKT_QOS_L                 (85),
		.PKT_QOS_H                 (85),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (13),
		.ID                        (0)
	) hps_0_h2f_lw_axi_master_agent (
		.aclk                   (clk_50_clk_clk),                                                       //              clk.clk
		.aresetn                (~hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_lw_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (hps_0_h2f_lw_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_lw_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_lw_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_lw_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_lw_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_lw_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_lw_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_lw_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_lw_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_lw_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_lw_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_lw_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_lw_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_lw_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_lw_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_lw_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_lw_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_lw_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_lw_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_lw_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_lw_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_lw_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_lw_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_lw_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_lw_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_lw_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_lw_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_lw_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_lw_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_lw_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_lw_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_lw_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_lw_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_lw_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_lw_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_lw_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                 //      (terminated)
		.aruser                 (1'b0),                                                                 //      (terminated)
		.awqos                  (4'b0000),                                                              //      (terminated)
		.arqos                  (4'b0000),                                                              //      (terminated)
		.awregion               (4'b0000),                                                              //      (terminated)
		.arregion               (4'b0000),                                                              //      (terminated)
		.wuser                  (1'b0),                                                                 //      (terminated)
		.ruser                  (),                                                                     //      (terminated)
		.buser                  ()                                                                      //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sw_s1_agent (
		.clk                     (clk_50_clk_clk),                            //             clk.clk
		.reset                   (sw_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (sw_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sw_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sw_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sw_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sw_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (sw_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sw_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sw_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (sw_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sw_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (sw_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (sw_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sw_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (sw_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (sw_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (sw_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sw_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sw_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sw_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sw_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sw_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sw_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sw_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sw_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sw_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sw_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sw_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sw_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sw_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sw_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sw_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sw_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),             //                .error
		.rdata_fifo_src_ready    (sw_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sw_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sw_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sw_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                         //       clk.clk
		.reset             (sw_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (sw_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sw_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sw_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sw_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sw_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sw_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sw_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sw_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sw_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sw_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                  // (terminated)
		.csr_read          (1'b0),                                   // (terminated)
		.csr_write         (1'b0),                                   // (terminated)
		.csr_readdata      (),                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),   // (terminated)
		.almost_full_data  (),                                       // (terminated)
		.almost_empty_data (),                                       // (terminated)
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.in_error          (1'b0),                                   // (terminated)
		.out_error         (),                                       // (terminated)
		.in_channel        (1'b0),                                   // (terminated)
		.out_channel       ()                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sw_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                       //       clk.clk
		.reset             (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sw_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (sw_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (sw_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (sw_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (sw_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (sw_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                // (terminated)
		.csr_read          (1'b0),                                 // (terminated)
		.csr_write         (1'b0),                                 // (terminated)
		.csr_readdata      (),                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000), // (terminated)
		.almost_full_data  (),                                     // (terminated)
		.almost_empty_data (),                                     // (terminated)
		.in_startofpacket  (1'b0),                                 // (terminated)
		.in_endofpacket    (1'b0),                                 // (terminated)
		.out_startofpacket (),                                     // (terminated)
		.out_endofpacket   (),                                     // (terminated)
		.in_empty          (1'b0),                                 // (terminated)
		.out_empty         (),                                     // (terminated)
		.in_error          (1'b0),                                 // (terminated)
		.out_error         (),                                     // (terminated)
		.in_channel        (1'b0),                                 // (terminated)
		.out_channel       ()                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) led_s1_agent (
		.clk                     (clk_50_clk_clk),                             //             clk.clk
		.reset                   (sw_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (led_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (led_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (led_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (led_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (led_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (led_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (led_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (led_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (led_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (led_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (led_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (led_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (led_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (led_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (led_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (led_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (led_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (led_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (led_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (led_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (led_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (led_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (led_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (led_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (led_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (led_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (led_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (led_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (led_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (led_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (led_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (led_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),          //                .error
		.rdata_fifo_src_ready    (led_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (led_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                          //       clk.clk
		.reset             (sw_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (led_s1_agent_rf_source_data),             //        in.data
		.in_valid          (led_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (led_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (led_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (led_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (led_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (led_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (led_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (led_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (led_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                       //       clk.clk
		.reset             (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_s1_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (led_s1_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (led_s1_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (led_s1_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (led_s1_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (led_s1_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                // (terminated)
		.csr_read          (1'b0),                                 // (terminated)
		.csr_write         (1'b0),                                 // (terminated)
		.csr_readdata      (),                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000), // (terminated)
		.almost_full_data  (),                                     // (terminated)
		.almost_empty_data (),                                     // (terminated)
		.in_startofpacket  (1'b0),                                 // (terminated)
		.in_endofpacket    (1'b0),                                 // (terminated)
		.out_startofpacket (),                                     // (terminated)
		.out_endofpacket   (),                                     // (terminated)
		.in_empty          (1'b0),                                 // (terminated)
		.out_empty         (),                                     // (terminated)
		.in_error          (1'b0),                                 // (terminated)
		.out_error         (),                                     // (terminated)
		.in_channel        (1'b0),                                 // (terminated)
		.out_channel       ()                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pvcurrent_s1_agent (
		.clk                     (clk_50_clk_clk),                                   //             clk.clk
		.reset                   (sw_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (pvcurrent_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pvcurrent_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pvcurrent_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pvcurrent_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pvcurrent_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pvcurrent_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pvcurrent_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pvcurrent_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pvcurrent_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pvcurrent_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pvcurrent_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pvcurrent_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pvcurrent_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pvcurrent_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pvcurrent_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pvcurrent_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pvcurrent_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pvcurrent_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pvcurrent_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pvcurrent_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pvcurrent_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pvcurrent_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pvcurrent_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pvcurrent_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pvcurrent_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pvcurrent_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pvcurrent_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pvcurrent_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pvcurrent_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pvcurrent_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pvcurrent_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pvcurrent_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                //                .error
		.rdata_fifo_src_ready    (pvcurrent_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pvcurrent_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pvcurrent_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pvcurrent_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                //       clk.clk
		.reset             (sw_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (pvcurrent_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pvcurrent_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pvcurrent_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pvcurrent_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pvcurrent_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pvcurrent_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pvcurrent_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pvcurrent_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pvcurrent_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pvcurrent_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pvcurrent_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                          //       clk.clk
		.reset             (sw_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (pvcurrent_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (pvcurrent_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (pvcurrent_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (pvcurrent_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (pvcurrent_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (pvcurrent_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pvvoltage_s1_agent (
		.clk                     (clk_50_clk_clk),                                   //             clk.clk
		.reset                   (sw_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (pvvoltage_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pvvoltage_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pvvoltage_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pvvoltage_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pvvoltage_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pvvoltage_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pvvoltage_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pvvoltage_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pvvoltage_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pvvoltage_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pvvoltage_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pvvoltage_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pvvoltage_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pvvoltage_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pvvoltage_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pvvoltage_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pvvoltage_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pvvoltage_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pvvoltage_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pvvoltage_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pvvoltage_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pvvoltage_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pvvoltage_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pvvoltage_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pvvoltage_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pvvoltage_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pvvoltage_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pvvoltage_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pvvoltage_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pvvoltage_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pvvoltage_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pvvoltage_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                //                .error
		.rdata_fifo_src_ready    (pvvoltage_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pvvoltage_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pvvoltage_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pvvoltage_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                //       clk.clk
		.reset             (sw_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (pvvoltage_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pvvoltage_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pvvoltage_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pvvoltage_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pvvoltage_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pvvoltage_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pvvoltage_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pvvoltage_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pvvoltage_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pvvoltage_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pvvoltage_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                          //       clk.clk
		.reset             (sw_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (pvvoltage_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (pvvoltage_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (pvvoltage_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (pvvoltage_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (pvvoltage_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (pvvoltage_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) bacurrent_s1_agent (
		.clk                     (clk_50_clk_clk),                                   //             clk.clk
		.reset                   (sw_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (bacurrent_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (bacurrent_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (bacurrent_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (bacurrent_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (bacurrent_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (bacurrent_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (bacurrent_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (bacurrent_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (bacurrent_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (bacurrent_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (bacurrent_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (bacurrent_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (bacurrent_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (bacurrent_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (bacurrent_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (bacurrent_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (bacurrent_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (bacurrent_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (bacurrent_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (bacurrent_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (bacurrent_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (bacurrent_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (bacurrent_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (bacurrent_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (bacurrent_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (bacurrent_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (bacurrent_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (bacurrent_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (bacurrent_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (bacurrent_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (bacurrent_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (bacurrent_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                //                .error
		.rdata_fifo_src_ready    (bacurrent_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (bacurrent_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (bacurrent_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) bacurrent_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                //       clk.clk
		.reset             (sw_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (bacurrent_s1_agent_rf_source_data),             //        in.data
		.in_valid          (bacurrent_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (bacurrent_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (bacurrent_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (bacurrent_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (bacurrent_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (bacurrent_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (bacurrent_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (bacurrent_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (bacurrent_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) bacurrent_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                          //       clk.clk
		.reset             (sw_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (bacurrent_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (bacurrent_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (bacurrent_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (bacurrent_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (bacurrent_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (bacurrent_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) bavoltage_s1_agent (
		.clk                     (clk_50_clk_clk),                                   //             clk.clk
		.reset                   (sw_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (bavoltage_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (bavoltage_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (bavoltage_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (bavoltage_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (bavoltage_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (bavoltage_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (bavoltage_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (bavoltage_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (bavoltage_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (bavoltage_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (bavoltage_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (bavoltage_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (bavoltage_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (bavoltage_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (bavoltage_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (bavoltage_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (bavoltage_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (bavoltage_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (bavoltage_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (bavoltage_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (bavoltage_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (bavoltage_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (bavoltage_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (bavoltage_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (bavoltage_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (bavoltage_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (bavoltage_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (bavoltage_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (bavoltage_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (bavoltage_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (bavoltage_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (bavoltage_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                //                .error
		.rdata_fifo_src_ready    (bavoltage_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (bavoltage_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (bavoltage_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) bavoltage_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                //       clk.clk
		.reset             (sw_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (bavoltage_s1_agent_rf_source_data),             //        in.data
		.in_valid          (bavoltage_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (bavoltage_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (bavoltage_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (bavoltage_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (bavoltage_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (bavoltage_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (bavoltage_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (bavoltage_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (bavoltage_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) bavoltage_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                          //       clk.clk
		.reset             (sw_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (bavoltage_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (bavoltage_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (bavoltage_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (bavoltage_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (bavoltage_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (bavoltage_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) vgr_current_s1_agent (
		.clk                     (clk_50_clk_clk),                                     //             clk.clk
		.reset                   (sw_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (vgr_current_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (vgr_current_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (vgr_current_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (vgr_current_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (vgr_current_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (vgr_current_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (vgr_current_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (vgr_current_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (vgr_current_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (vgr_current_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (vgr_current_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (vgr_current_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (vgr_current_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (vgr_current_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (vgr_current_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (vgr_current_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (vgr_current_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (vgr_current_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (vgr_current_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (vgr_current_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (vgr_current_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (vgr_current_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (vgr_current_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (vgr_current_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (vgr_current_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (vgr_current_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (vgr_current_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (vgr_current_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (vgr_current_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (vgr_current_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (vgr_current_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (vgr_current_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (vgr_current_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vgr_current_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (vgr_current_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vgr_current_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                  //       clk.clk
		.reset             (sw_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (vgr_current_s1_agent_rf_source_data),             //        in.data
		.in_valid          (vgr_current_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (vgr_current_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vgr_current_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vgr_current_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vgr_current_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vgr_current_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vgr_current_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vgr_current_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vgr_current_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vgr_current_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                            //       clk.clk
		.reset             (sw_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (vgr_current_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (vgr_current_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (vgr_current_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (vgr_current_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (vgr_current_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (vgr_current_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_startofpacket  (1'b0),                                      // (terminated)
		.in_endofpacket    (1'b0),                                      // (terminated)
		.out_startofpacket (),                                          // (terminated)
		.out_endofpacket   (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) vgs_current_s1_agent (
		.clk                     (clk_50_clk_clk),                                     //             clk.clk
		.reset                   (sw_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (vgs_current_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (vgs_current_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (vgs_current_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (vgs_current_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (vgs_current_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (vgs_current_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (vgs_current_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (vgs_current_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (vgs_current_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (vgs_current_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (vgs_current_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (vgs_current_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (vgs_current_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (vgs_current_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (vgs_current_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (vgs_current_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (vgs_current_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (vgs_current_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (vgs_current_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (vgs_current_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (vgs_current_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (vgs_current_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (vgs_current_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (vgs_current_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (vgs_current_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (vgs_current_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (vgs_current_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (vgs_current_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (vgs_current_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (vgs_current_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (vgs_current_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (vgs_current_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (vgs_current_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vgs_current_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (vgs_current_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vgs_current_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                  //       clk.clk
		.reset             (sw_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (vgs_current_s1_agent_rf_source_data),             //        in.data
		.in_valid          (vgs_current_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (vgs_current_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vgs_current_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vgs_current_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vgs_current_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vgs_current_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vgs_current_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vgs_current_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vgs_current_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vgs_current_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                            //       clk.clk
		.reset             (sw_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (vgs_current_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (vgs_current_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (vgs_current_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (vgs_current_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (vgs_current_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (vgs_current_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_startofpacket  (1'b0),                                      // (terminated)
		.in_endofpacket    (1'b0),                                      // (terminated)
		.out_startofpacket (),                                          // (terminated)
		.out_endofpacket   (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) vgt_current_s1_agent (
		.clk                     (clk_50_clk_clk),                                     //             clk.clk
		.reset                   (sw_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (vgt_current_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (vgt_current_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (vgt_current_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (vgt_current_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (vgt_current_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (vgt_current_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (vgt_current_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (vgt_current_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (vgt_current_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (vgt_current_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (vgt_current_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (vgt_current_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (vgt_current_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (vgt_current_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (vgt_current_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (vgt_current_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (vgt_current_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (vgt_current_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (vgt_current_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (vgt_current_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (vgt_current_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (vgt_current_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (vgt_current_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (vgt_current_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (vgt_current_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (vgt_current_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (vgt_current_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (vgt_current_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (vgt_current_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (vgt_current_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (vgt_current_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (vgt_current_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (vgt_current_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vgt_current_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (vgt_current_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vgt_current_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                  //       clk.clk
		.reset             (sw_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (vgt_current_s1_agent_rf_source_data),             //        in.data
		.in_valid          (vgt_current_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (vgt_current_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vgt_current_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vgt_current_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vgt_current_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vgt_current_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vgt_current_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vgt_current_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vgt_current_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vgt_current_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                            //       clk.clk
		.reset             (sw_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (vgt_current_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (vgt_current_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (vgt_current_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (vgt_current_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (vgt_current_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (vgt_current_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_startofpacket  (1'b0),                                      // (terminated)
		.in_endofpacket    (1'b0),                                      // (terminated)
		.out_startofpacket (),                                          // (terminated)
		.out_endofpacket   (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) vgr_voltage_s1_agent (
		.clk                     (clk_50_clk_clk),                                     //             clk.clk
		.reset                   (sw_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (vgr_voltage_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (vgr_voltage_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (vgr_voltage_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (vgr_voltage_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (vgr_voltage_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (vgr_voltage_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (vgr_voltage_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (vgr_voltage_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (vgr_voltage_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (vgr_voltage_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (vgr_voltage_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (vgr_voltage_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (vgr_voltage_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (vgr_voltage_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (vgr_voltage_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (vgr_voltage_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (vgr_voltage_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (vgr_voltage_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (vgr_voltage_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (vgr_voltage_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (vgr_voltage_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (vgr_voltage_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (vgr_voltage_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (vgr_voltage_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (vgr_voltage_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (vgr_voltage_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (vgr_voltage_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (vgr_voltage_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (vgr_voltage_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (vgr_voltage_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (vgr_voltage_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (vgr_voltage_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (vgr_voltage_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vgr_voltage_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (vgr_voltage_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vgr_voltage_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                  //       clk.clk
		.reset             (sw_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (vgr_voltage_s1_agent_rf_source_data),             //        in.data
		.in_valid          (vgr_voltage_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (vgr_voltage_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vgr_voltage_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vgr_voltage_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vgr_voltage_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vgr_voltage_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vgr_voltage_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vgr_voltage_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vgr_voltage_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vgr_voltage_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                            //       clk.clk
		.reset             (sw_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (vgr_voltage_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (vgr_voltage_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (vgr_voltage_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (vgr_voltage_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (vgr_voltage_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (vgr_voltage_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_startofpacket  (1'b0),                                      // (terminated)
		.in_endofpacket    (1'b0),                                      // (terminated)
		.out_startofpacket (),                                          // (terminated)
		.out_endofpacket   (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) vgs_voltage_s1_agent (
		.clk                     (clk_50_clk_clk),                                     //             clk.clk
		.reset                   (sw_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (vgs_voltage_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (vgs_voltage_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (vgs_voltage_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (vgs_voltage_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (vgs_voltage_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (vgs_voltage_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (vgs_voltage_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (vgs_voltage_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (vgs_voltage_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (vgs_voltage_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (vgs_voltage_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (vgs_voltage_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (vgs_voltage_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (vgs_voltage_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (vgs_voltage_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (vgs_voltage_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (vgs_voltage_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (vgs_voltage_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (vgs_voltage_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (vgs_voltage_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (vgs_voltage_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (vgs_voltage_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (vgs_voltage_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (vgs_voltage_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (vgs_voltage_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (vgs_voltage_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (vgs_voltage_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (vgs_voltage_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (vgs_voltage_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (vgs_voltage_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (vgs_voltage_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (vgs_voltage_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (vgs_voltage_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vgs_voltage_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (vgs_voltage_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vgs_voltage_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                  //       clk.clk
		.reset             (sw_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (vgs_voltage_s1_agent_rf_source_data),             //        in.data
		.in_valid          (vgs_voltage_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (vgs_voltage_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vgs_voltage_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vgs_voltage_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vgs_voltage_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vgs_voltage_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vgs_voltage_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vgs_voltage_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vgs_voltage_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vgs_voltage_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                            //       clk.clk
		.reset             (sw_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (vgs_voltage_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (vgs_voltage_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (vgs_voltage_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (vgs_voltage_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (vgs_voltage_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (vgs_voltage_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_startofpacket  (1'b0),                                      // (terminated)
		.in_endofpacket    (1'b0),                                      // (terminated)
		.out_startofpacket (),                                          // (terminated)
		.out_endofpacket   (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) vgt_voltage_s1_agent (
		.clk                     (clk_50_clk_clk),                                     //             clk.clk
		.reset                   (sw_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (vgt_voltage_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (vgt_voltage_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (vgt_voltage_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (vgt_voltage_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (vgt_voltage_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (vgt_voltage_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (vgt_voltage_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (vgt_voltage_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (vgt_voltage_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (vgt_voltage_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (vgt_voltage_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (vgt_voltage_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (vgt_voltage_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (vgt_voltage_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (vgt_voltage_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (vgt_voltage_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (vgt_voltage_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (vgt_voltage_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (vgt_voltage_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (vgt_voltage_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (vgt_voltage_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (vgt_voltage_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (vgt_voltage_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (vgt_voltage_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (vgt_voltage_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (vgt_voltage_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (vgt_voltage_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (vgt_voltage_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (vgt_voltage_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (vgt_voltage_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (vgt_voltage_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (vgt_voltage_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (vgt_voltage_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vgt_voltage_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (vgt_voltage_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vgt_voltage_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                  //       clk.clk
		.reset             (sw_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (vgt_voltage_s1_agent_rf_source_data),             //        in.data
		.in_valid          (vgt_voltage_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (vgt_voltage_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vgt_voltage_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vgt_voltage_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vgt_voltage_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vgt_voltage_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vgt_voltage_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vgt_voltage_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vgt_voltage_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vgt_voltage_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                            //       clk.clk
		.reset             (sw_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (vgt_voltage_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (vgt_voltage_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (vgt_voltage_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (vgt_voltage_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (vgt_voltage_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (vgt_voltage_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_startofpacket  (1'b0),                                      // (terminated)
		.in_endofpacket    (1'b0),                                      // (terminated)
		.out_startofpacket (),                                          // (terminated)
		.out_endofpacket   (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) phase_s1_agent (
		.clk                     (clk_50_clk_clk),                               //             clk.clk
		.reset                   (sw_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (phase_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (phase_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (phase_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (phase_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (phase_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (phase_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (phase_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (phase_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (phase_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (phase_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (phase_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (phase_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (phase_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (phase_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (phase_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (phase_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (phase_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (phase_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (phase_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (phase_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (phase_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (phase_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (phase_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (phase_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (phase_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (phase_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (phase_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (phase_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (phase_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (phase_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (phase_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (phase_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),            //                .error
		.rdata_fifo_src_ready    (phase_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (phase_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (phase_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) phase_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                            //       clk.clk
		.reset             (sw_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (phase_s1_agent_rf_source_data),             //        in.data
		.in_valid          (phase_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (phase_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (phase_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (phase_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (phase_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (phase_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (phase_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (phase_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (phase_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) phase_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                       //       clk.clk
		.reset             (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (phase_s1_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (phase_s1_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (phase_s1_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (phase_s1_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (phase_s1_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (phase_s1_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                // (terminated)
		.csr_read          (1'b0),                                 // (terminated)
		.csr_write         (1'b0),                                 // (terminated)
		.csr_readdata      (),                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000), // (terminated)
		.almost_full_data  (),                                     // (terminated)
		.almost_empty_data (),                                     // (terminated)
		.in_startofpacket  (1'b0),                                 // (terminated)
		.in_endofpacket    (1'b0),                                 // (terminated)
		.out_startofpacket (),                                     // (terminated)
		.out_endofpacket   (),                                     // (terminated)
		.in_empty          (1'b0),                                 // (terminated)
		.out_empty         (),                                     // (terminated)
		.in_error          (1'b0),                                 // (terminated)
		.out_error         (),                                     // (terminated)
		.in_channel        (1'b0),                                 // (terminated)
		.out_channel       ()                                      // (terminated)
	);

	cpu_mm_interconnect_0_router router (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (clk_50_clk_clk),                                                      //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                    //       src.ready
		.src_valid          (router_src_valid),                                                    //          .valid
		.src_data           (router_src_data),                                                     //          .data
		.src_channel        (router_src_channel),                                                  //          .channel
		.src_startofpacket  (router_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                               //          .endofpacket
	);

	cpu_mm_interconnect_0_router router_001 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (clk_50_clk_clk),                                                      //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                                //       src.ready
		.src_valid          (router_001_src_valid),                                                //          .valid
		.src_data           (router_001_src_data),                                                 //          .data
		.src_channel        (router_001_src_channel),                                              //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                           //          .endofpacket
	);

	cpu_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (sw_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (sw_s1_agent_rp_valid),                 //          .valid
		.sink_data          (sw_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (sw_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (sw_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_50_clk_clk),                       //       clk.clk
		.reset              (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                 //       src.ready
		.src_valid          (router_002_src_valid),                 //          .valid
		.src_data           (router_002_src_data),                  //          .data
		.src_channel        (router_002_src_channel),               //          .channel
		.src_startofpacket  (router_002_src_startofpacket),         //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)            //          .endofpacket
	);

	cpu_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (led_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (led_s1_agent_rp_valid),                //          .valid
		.sink_data          (led_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (led_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (led_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_50_clk_clk),                       //       clk.clk
		.reset              (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                 //       src.ready
		.src_valid          (router_003_src_valid),                 //          .valid
		.src_data           (router_003_src_data),                  //          .data
		.src_channel        (router_003_src_channel),               //          .channel
		.src_startofpacket  (router_003_src_startofpacket),         //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)            //          .endofpacket
	);

	cpu_mm_interconnect_0_router_002 router_004 (
		.sink_ready         (pvcurrent_s1_agent_rp_ready),          //      sink.ready
		.sink_valid         (pvcurrent_s1_agent_rp_valid),          //          .valid
		.sink_data          (pvcurrent_s1_agent_rp_data),           //          .data
		.sink_startofpacket (pvcurrent_s1_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (pvcurrent_s1_agent_rp_endofpacket),    //          .endofpacket
		.clk                (clk_50_clk_clk),                       //       clk.clk
		.reset              (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                 //       src.ready
		.src_valid          (router_004_src_valid),                 //          .valid
		.src_data           (router_004_src_data),                  //          .data
		.src_channel        (router_004_src_channel),               //          .channel
		.src_startofpacket  (router_004_src_startofpacket),         //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)            //          .endofpacket
	);

	cpu_mm_interconnect_0_router_002 router_005 (
		.sink_ready         (pvvoltage_s1_agent_rp_ready),          //      sink.ready
		.sink_valid         (pvvoltage_s1_agent_rp_valid),          //          .valid
		.sink_data          (pvvoltage_s1_agent_rp_data),           //          .data
		.sink_startofpacket (pvvoltage_s1_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (pvvoltage_s1_agent_rp_endofpacket),    //          .endofpacket
		.clk                (clk_50_clk_clk),                       //       clk.clk
		.reset              (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                 //       src.ready
		.src_valid          (router_005_src_valid),                 //          .valid
		.src_data           (router_005_src_data),                  //          .data
		.src_channel        (router_005_src_channel),               //          .channel
		.src_startofpacket  (router_005_src_startofpacket),         //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)            //          .endofpacket
	);

	cpu_mm_interconnect_0_router_002 router_006 (
		.sink_ready         (bacurrent_s1_agent_rp_ready),          //      sink.ready
		.sink_valid         (bacurrent_s1_agent_rp_valid),          //          .valid
		.sink_data          (bacurrent_s1_agent_rp_data),           //          .data
		.sink_startofpacket (bacurrent_s1_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (bacurrent_s1_agent_rp_endofpacket),    //          .endofpacket
		.clk                (clk_50_clk_clk),                       //       clk.clk
		.reset              (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                 //       src.ready
		.src_valid          (router_006_src_valid),                 //          .valid
		.src_data           (router_006_src_data),                  //          .data
		.src_channel        (router_006_src_channel),               //          .channel
		.src_startofpacket  (router_006_src_startofpacket),         //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)            //          .endofpacket
	);

	cpu_mm_interconnect_0_router_002 router_007 (
		.sink_ready         (bavoltage_s1_agent_rp_ready),          //      sink.ready
		.sink_valid         (bavoltage_s1_agent_rp_valid),          //          .valid
		.sink_data          (bavoltage_s1_agent_rp_data),           //          .data
		.sink_startofpacket (bavoltage_s1_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (bavoltage_s1_agent_rp_endofpacket),    //          .endofpacket
		.clk                (clk_50_clk_clk),                       //       clk.clk
		.reset              (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                 //       src.ready
		.src_valid          (router_007_src_valid),                 //          .valid
		.src_data           (router_007_src_data),                  //          .data
		.src_channel        (router_007_src_channel),               //          .channel
		.src_startofpacket  (router_007_src_startofpacket),         //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)            //          .endofpacket
	);

	cpu_mm_interconnect_0_router_002 router_008 (
		.sink_ready         (vgr_current_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (vgr_current_s1_agent_rp_valid),         //          .valid
		.sink_data          (vgr_current_s1_agent_rp_data),          //          .data
		.sink_startofpacket (vgr_current_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vgr_current_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                        //       clk.clk
		.reset              (sw_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_008_src_ready),                  //       src.ready
		.src_valid          (router_008_src_valid),                  //          .valid
		.src_data           (router_008_src_data),                   //          .data
		.src_channel        (router_008_src_channel),                //          .channel
		.src_startofpacket  (router_008_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)             //          .endofpacket
	);

	cpu_mm_interconnect_0_router_002 router_009 (
		.sink_ready         (vgs_current_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (vgs_current_s1_agent_rp_valid),         //          .valid
		.sink_data          (vgs_current_s1_agent_rp_data),          //          .data
		.sink_startofpacket (vgs_current_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vgs_current_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                        //       clk.clk
		.reset              (sw_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_009_src_ready),                  //       src.ready
		.src_valid          (router_009_src_valid),                  //          .valid
		.src_data           (router_009_src_data),                   //          .data
		.src_channel        (router_009_src_channel),                //          .channel
		.src_startofpacket  (router_009_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)             //          .endofpacket
	);

	cpu_mm_interconnect_0_router_002 router_010 (
		.sink_ready         (vgt_current_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (vgt_current_s1_agent_rp_valid),         //          .valid
		.sink_data          (vgt_current_s1_agent_rp_data),          //          .data
		.sink_startofpacket (vgt_current_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vgt_current_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                        //       clk.clk
		.reset              (sw_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_010_src_ready),                  //       src.ready
		.src_valid          (router_010_src_valid),                  //          .valid
		.src_data           (router_010_src_data),                   //          .data
		.src_channel        (router_010_src_channel),                //          .channel
		.src_startofpacket  (router_010_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)             //          .endofpacket
	);

	cpu_mm_interconnect_0_router_002 router_011 (
		.sink_ready         (vgr_voltage_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (vgr_voltage_s1_agent_rp_valid),         //          .valid
		.sink_data          (vgr_voltage_s1_agent_rp_data),          //          .data
		.sink_startofpacket (vgr_voltage_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vgr_voltage_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                        //       clk.clk
		.reset              (sw_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_011_src_ready),                  //       src.ready
		.src_valid          (router_011_src_valid),                  //          .valid
		.src_data           (router_011_src_data),                   //          .data
		.src_channel        (router_011_src_channel),                //          .channel
		.src_startofpacket  (router_011_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)             //          .endofpacket
	);

	cpu_mm_interconnect_0_router_002 router_012 (
		.sink_ready         (vgs_voltage_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (vgs_voltage_s1_agent_rp_valid),         //          .valid
		.sink_data          (vgs_voltage_s1_agent_rp_data),          //          .data
		.sink_startofpacket (vgs_voltage_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vgs_voltage_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                        //       clk.clk
		.reset              (sw_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_012_src_ready),                  //       src.ready
		.src_valid          (router_012_src_valid),                  //          .valid
		.src_data           (router_012_src_data),                   //          .data
		.src_channel        (router_012_src_channel),                //          .channel
		.src_startofpacket  (router_012_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)             //          .endofpacket
	);

	cpu_mm_interconnect_0_router_002 router_013 (
		.sink_ready         (vgt_voltage_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (vgt_voltage_s1_agent_rp_valid),         //          .valid
		.sink_data          (vgt_voltage_s1_agent_rp_data),          //          .data
		.sink_startofpacket (vgt_voltage_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vgt_voltage_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                        //       clk.clk
		.reset              (sw_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_013_src_ready),                  //       src.ready
		.src_valid          (router_013_src_valid),                  //          .valid
		.src_data           (router_013_src_data),                   //          .data
		.src_channel        (router_013_src_channel),                //          .channel
		.src_startofpacket  (router_013_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)             //          .endofpacket
	);

	cpu_mm_interconnect_0_router_002 router_014 (
		.sink_ready         (phase_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (phase_s1_agent_rp_valid),              //          .valid
		.sink_data          (phase_s1_agent_rp_data),               //          .data
		.sink_startofpacket (phase_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (phase_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_50_clk_clk),                       //       clk.clk
		.reset              (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                 //       src.ready
		.src_valid          (router_014_src_valid),                 //          .valid
		.src_data           (router_014_src_data),                  //          .data
		.src_channel        (router_014_src_channel),               //          .channel
		.src_startofpacket  (router_014_src_startofpacket),         //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)            //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (13),
		.VALID_WIDTH               (13),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_wr_limiter (
		.clk                    (clk_50_clk_clk),                                                      //       clk.clk
		.reset                  (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                    //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                    //          .valid
		.cmd_sink_data          (router_src_data),                                                     //          .data
		.cmd_sink_channel       (router_src_channel),                                                  //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                            //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                              //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                   //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                   //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                                 //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                    //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                           //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                             //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (13),
		.VALID_WIDTH               (13),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_rd_limiter (
		.clk                    (clk_50_clk_clk),                                                      //       clk.clk
		.reset                  (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                                //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                                //          .valid
		.cmd_sink_data          (router_001_src_data),                                                 //          .data
		.cmd_sink_channel       (router_001_src_channel),                                              //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                        //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                          //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                               //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                             //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                                //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                         //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sw_s1_burst_adapter (
		.clk                   (clk_50_clk_clk),                            //       cr0.clk
		.reset                 (sw_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                         //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                          //          .data
		.sink0_channel         (cmd_mux_src_channel),                       //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                 //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                   //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                         //          .ready
		.source0_valid         (sw_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sw_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sw_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sw_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sw_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sw_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) led_s1_burst_adapter (
		.clk                   (clk_50_clk_clk),                             //       cr0.clk
		.reset                 (sw_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                      //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                       //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                    //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),              //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                      //          .ready
		.source0_valid         (led_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (led_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (led_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (led_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (led_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (led_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pvcurrent_s1_burst_adapter (
		.clk                   (clk_50_clk_clk),                                   //       cr0.clk
		.reset                 (sw_reset_reset_bridge_in_reset_reset),             // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                             //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                            //          .ready
		.source0_valid         (pvcurrent_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pvcurrent_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (pvcurrent_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pvcurrent_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pvcurrent_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pvcurrent_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pvvoltage_s1_burst_adapter (
		.clk                   (clk_50_clk_clk),                                   //       cr0.clk
		.reset                 (sw_reset_reset_bridge_in_reset_reset),             // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                             //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                            //          .ready
		.source0_valid         (pvvoltage_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pvvoltage_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (pvvoltage_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pvvoltage_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pvvoltage_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pvvoltage_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) bacurrent_s1_burst_adapter (
		.clk                   (clk_50_clk_clk),                                   //       cr0.clk
		.reset                 (sw_reset_reset_bridge_in_reset_reset),             // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                             //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                            //          .ready
		.source0_valid         (bacurrent_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (bacurrent_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (bacurrent_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (bacurrent_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (bacurrent_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (bacurrent_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) bavoltage_s1_burst_adapter (
		.clk                   (clk_50_clk_clk),                                   //       cr0.clk
		.reset                 (sw_reset_reset_bridge_in_reset_reset),             // cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                             //          .data
		.sink0_channel         (cmd_mux_005_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                            //          .ready
		.source0_valid         (bavoltage_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (bavoltage_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (bavoltage_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (bavoltage_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (bavoltage_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (bavoltage_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) vgr_current_s1_burst_adapter (
		.clk                   (clk_50_clk_clk),                                     //       cr0.clk
		.reset                 (sw_reset_reset_bridge_in_reset_reset),               // cr0_reset.reset
		.sink0_valid           (cmd_mux_006_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_006_src_data),                               //          .data
		.sink0_channel         (cmd_mux_006_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_006_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_006_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_006_src_ready),                              //          .ready
		.source0_valid         (vgr_current_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (vgr_current_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (vgr_current_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (vgr_current_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (vgr_current_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (vgr_current_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) vgs_current_s1_burst_adapter (
		.clk                   (clk_50_clk_clk),                                     //       cr0.clk
		.reset                 (sw_reset_reset_bridge_in_reset_reset),               // cr0_reset.reset
		.sink0_valid           (cmd_mux_007_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_007_src_data),                               //          .data
		.sink0_channel         (cmd_mux_007_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_007_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_007_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_007_src_ready),                              //          .ready
		.source0_valid         (vgs_current_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (vgs_current_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (vgs_current_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (vgs_current_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (vgs_current_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (vgs_current_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) vgt_current_s1_burst_adapter (
		.clk                   (clk_50_clk_clk),                                     //       cr0.clk
		.reset                 (sw_reset_reset_bridge_in_reset_reset),               // cr0_reset.reset
		.sink0_valid           (cmd_mux_008_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_008_src_data),                               //          .data
		.sink0_channel         (cmd_mux_008_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_008_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_008_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_008_src_ready),                              //          .ready
		.source0_valid         (vgt_current_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (vgt_current_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (vgt_current_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (vgt_current_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (vgt_current_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (vgt_current_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) vgr_voltage_s1_burst_adapter (
		.clk                   (clk_50_clk_clk),                                     //       cr0.clk
		.reset                 (sw_reset_reset_bridge_in_reset_reset),               // cr0_reset.reset
		.sink0_valid           (cmd_mux_009_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_009_src_data),                               //          .data
		.sink0_channel         (cmd_mux_009_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_009_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_009_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_009_src_ready),                              //          .ready
		.source0_valid         (vgr_voltage_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (vgr_voltage_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (vgr_voltage_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (vgr_voltage_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (vgr_voltage_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (vgr_voltage_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) vgs_voltage_s1_burst_adapter (
		.clk                   (clk_50_clk_clk),                                     //       cr0.clk
		.reset                 (sw_reset_reset_bridge_in_reset_reset),               // cr0_reset.reset
		.sink0_valid           (cmd_mux_010_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_010_src_data),                               //          .data
		.sink0_channel         (cmd_mux_010_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_010_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_010_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_010_src_ready),                              //          .ready
		.source0_valid         (vgs_voltage_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (vgs_voltage_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (vgs_voltage_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (vgs_voltage_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (vgs_voltage_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (vgs_voltage_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) vgt_voltage_s1_burst_adapter (
		.clk                   (clk_50_clk_clk),                                     //       cr0.clk
		.reset                 (sw_reset_reset_bridge_in_reset_reset),               // cr0_reset.reset
		.sink0_valid           (cmd_mux_011_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_011_src_data),                               //          .data
		.sink0_channel         (cmd_mux_011_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_011_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_011_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_011_src_ready),                              //          .ready
		.source0_valid         (vgt_voltage_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (vgt_voltage_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (vgt_voltage_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (vgt_voltage_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (vgt_voltage_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (vgt_voltage_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) phase_s1_burst_adapter (
		.clk                   (clk_50_clk_clk),                               //       cr0.clk
		.reset                 (sw_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (cmd_mux_012_src_valid),                        //     sink0.valid
		.sink0_data            (cmd_mux_012_src_data),                         //          .data
		.sink0_channel         (cmd_mux_012_src_channel),                      //          .channel
		.sink0_startofpacket   (cmd_mux_012_src_startofpacket),                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_012_src_endofpacket),                  //          .endofpacket
		.sink0_ready           (cmd_mux_012_src_ready),                        //          .ready
		.source0_valid         (phase_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (phase_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (phase_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (phase_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (phase_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (phase_s1_burst_adapter_source0_ready)          //          .ready
	);

	cpu_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (clk_50_clk_clk),                                                      //        clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel        (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data           (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                                                //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                                                //           .valid
		.src0_data           (cmd_demux_src0_data),                                                 //           .data
		.src0_channel        (cmd_demux_src0_channel),                                              //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                                        //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                                          //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                                                //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                                                //           .valid
		.src1_data           (cmd_demux_src1_data),                                                 //           .data
		.src1_channel        (cmd_demux_src1_channel),                                              //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                                        //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                                          //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                                                //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                                                //           .valid
		.src2_data           (cmd_demux_src2_data),                                                 //           .data
		.src2_channel        (cmd_demux_src2_channel),                                              //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                                        //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                                          //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                                                //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                                                //           .valid
		.src3_data           (cmd_demux_src3_data),                                                 //           .data
		.src3_channel        (cmd_demux_src3_channel),                                              //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                                        //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                                          //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                                                //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                                                //           .valid
		.src4_data           (cmd_demux_src4_data),                                                 //           .data
		.src4_channel        (cmd_demux_src4_channel),                                              //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                                        //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                                          //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                                                //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                                                //           .valid
		.src5_data           (cmd_demux_src5_data),                                                 //           .data
		.src5_channel        (cmd_demux_src5_channel),                                              //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                                        //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                                          //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                                                //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                                                //           .valid
		.src6_data           (cmd_demux_src6_data),                                                 //           .data
		.src6_channel        (cmd_demux_src6_channel),                                              //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                                        //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                                          //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                                                //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                                                //           .valid
		.src7_data           (cmd_demux_src7_data),                                                 //           .data
		.src7_channel        (cmd_demux_src7_channel),                                              //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                                        //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                                          //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                                                //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                                                //           .valid
		.src8_data           (cmd_demux_src8_data),                                                 //           .data
		.src8_channel        (cmd_demux_src8_channel),                                              //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                                        //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                                          //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                                                //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                                                //           .valid
		.src9_data           (cmd_demux_src9_data),                                                 //           .data
		.src9_channel        (cmd_demux_src9_channel),                                              //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                                        //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                                          //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                                               //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                                               //           .valid
		.src10_data          (cmd_demux_src10_data),                                                //           .data
		.src10_channel       (cmd_demux_src10_channel),                                             //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                                       //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                                         //           .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                                               //      src11.ready
		.src11_valid         (cmd_demux_src11_valid),                                               //           .valid
		.src11_data          (cmd_demux_src11_data),                                                //           .data
		.src11_channel       (cmd_demux_src11_channel),                                             //           .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                                       //           .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                                         //           .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                                               //      src12.ready
		.src12_valid         (cmd_demux_src12_valid),                                               //           .valid
		.src12_data          (cmd_demux_src12_data),                                                //           .data
		.src12_channel       (cmd_demux_src12_channel),                                             //           .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                                       //           .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket)                                          //           .endofpacket
	);

	cpu_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                 (clk_50_clk_clk),                                                      //        clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel        (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data           (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready          (cmd_demux_001_src0_ready),                                            //       src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                                            //           .valid
		.src0_data           (cmd_demux_001_src0_data),                                             //           .data
		.src0_channel        (cmd_demux_001_src0_channel),                                          //           .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),                                    //           .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),                                      //           .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                                            //       src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                                            //           .valid
		.src1_data           (cmd_demux_001_src1_data),                                             //           .data
		.src1_channel        (cmd_demux_001_src1_channel),                                          //           .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),                                    //           .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),                                      //           .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                                            //       src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                                            //           .valid
		.src2_data           (cmd_demux_001_src2_data),                                             //           .data
		.src2_channel        (cmd_demux_001_src2_channel),                                          //           .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),                                    //           .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),                                      //           .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                                            //       src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                                            //           .valid
		.src3_data           (cmd_demux_001_src3_data),                                             //           .data
		.src3_channel        (cmd_demux_001_src3_channel),                                          //           .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),                                    //           .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),                                      //           .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                                            //       src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                                            //           .valid
		.src4_data           (cmd_demux_001_src4_data),                                             //           .data
		.src4_channel        (cmd_demux_001_src4_channel),                                          //           .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),                                    //           .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),                                      //           .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                                            //       src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                                            //           .valid
		.src5_data           (cmd_demux_001_src5_data),                                             //           .data
		.src5_channel        (cmd_demux_001_src5_channel),                                          //           .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),                                    //           .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),                                      //           .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                                            //       src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                                            //           .valid
		.src6_data           (cmd_demux_001_src6_data),                                             //           .data
		.src6_channel        (cmd_demux_001_src6_channel),                                          //           .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),                                    //           .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),                                      //           .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                                            //       src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                                            //           .valid
		.src7_data           (cmd_demux_001_src7_data),                                             //           .data
		.src7_channel        (cmd_demux_001_src7_channel),                                          //           .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),                                    //           .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),                                      //           .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                                            //       src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                                            //           .valid
		.src8_data           (cmd_demux_001_src8_data),                                             //           .data
		.src8_channel        (cmd_demux_001_src8_channel),                                          //           .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),                                    //           .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),                                      //           .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                                            //       src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                                            //           .valid
		.src9_data           (cmd_demux_001_src9_data),                                             //           .data
		.src9_channel        (cmd_demux_001_src9_channel),                                          //           .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),                                    //           .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),                                      //           .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),                                           //      src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),                                           //           .valid
		.src10_data          (cmd_demux_001_src10_data),                                            //           .data
		.src10_channel       (cmd_demux_001_src10_channel),                                         //           .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),                                   //           .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket),                                     //           .endofpacket
		.src11_ready         (cmd_demux_001_src11_ready),                                           //      src11.ready
		.src11_valid         (cmd_demux_001_src11_valid),                                           //           .valid
		.src11_data          (cmd_demux_001_src11_data),                                            //           .data
		.src11_channel       (cmd_demux_001_src11_channel),                                         //           .channel
		.src11_startofpacket (cmd_demux_001_src11_startofpacket),                                   //           .startofpacket
		.src11_endofpacket   (cmd_demux_001_src11_endofpacket),                                     //           .endofpacket
		.src12_ready         (cmd_demux_001_src12_ready),                                           //      src12.ready
		.src12_valid         (cmd_demux_001_src12_valid),                                           //           .valid
		.src12_data          (cmd_demux_001_src12_data),                                            //           .data
		.src12_channel       (cmd_demux_001_src12_channel),                                         //           .channel
		.src12_startofpacket (cmd_demux_001_src12_startofpacket),                                   //           .startofpacket
		.src12_endofpacket   (cmd_demux_001_src12_endofpacket)                                      //           .endofpacket
	);

	cpu_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_50_clk_clk),                       //       clk.clk
		.reset               (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_src_valid),                    //          .valid
		.src_data            (cmd_mux_src_data),                     //          .data
		.src_channel         (cmd_mux_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src0_channel),               //          .channel
		.sink0_data          (cmd_demux_src0_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),             //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),           //          .channel
		.sink1_data          (cmd_demux_001_src0_data),              //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)        //          .endofpacket
	);

	cpu_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_50_clk_clk),                       //       clk.clk
		.reset               (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                //          .valid
		.src_data            (cmd_mux_001_src_data),                 //          .data
		.src_channel         (cmd_mux_001_src_channel),              //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),        //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),          //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src1_channel),               //          .channel
		.sink0_data          (cmd_demux_src1_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),             //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),           //          .channel
		.sink1_data          (cmd_demux_001_src1_data),              //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)        //          .endofpacket
	);

	cpu_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (clk_50_clk_clk),                       //       clk.clk
		.reset               (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                //          .valid
		.src_data            (cmd_mux_002_src_data),                 //          .data
		.src_channel         (cmd_mux_002_src_channel),              //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),        //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),          //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src2_channel),               //          .channel
		.sink0_data          (cmd_demux_src2_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),             //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),           //          .channel
		.sink1_data          (cmd_demux_001_src2_data),              //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)        //          .endofpacket
	);

	cpu_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (clk_50_clk_clk),                       //       clk.clk
		.reset               (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                //          .valid
		.src_data            (cmd_mux_003_src_data),                 //          .data
		.src_channel         (cmd_mux_003_src_channel),              //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),        //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),          //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src3_channel),               //          .channel
		.sink0_data          (cmd_demux_src3_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),             //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),           //          .channel
		.sink1_data          (cmd_demux_001_src3_data),              //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)        //          .endofpacket
	);

	cpu_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_50_clk_clk),                       //       clk.clk
		.reset               (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                //          .valid
		.src_data            (cmd_mux_004_src_data),                 //          .data
		.src_channel         (cmd_mux_004_src_channel),              //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),        //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),          //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src4_channel),               //          .channel
		.sink0_data          (cmd_demux_src4_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),             //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),           //          .channel
		.sink1_data          (cmd_demux_001_src4_data),              //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket)        //          .endofpacket
	);

	cpu_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (clk_50_clk_clk),                       //       clk.clk
		.reset               (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                //          .valid
		.src_data            (cmd_mux_005_src_data),                 //          .data
		.src_channel         (cmd_mux_005_src_channel),              //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),        //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),          //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src5_channel),               //          .channel
		.sink0_data          (cmd_demux_src5_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src5_ready),             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src5_valid),             //          .valid
		.sink1_channel       (cmd_demux_001_src5_channel),           //          .channel
		.sink1_data          (cmd_demux_001_src5_data),              //          .data
		.sink1_startofpacket (cmd_demux_001_src5_startofpacket),     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src5_endofpacket)        //          .endofpacket
	);

	cpu_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (clk_50_clk_clk),                       //       clk.clk
		.reset               (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                //          .valid
		.src_data            (cmd_mux_006_src_data),                 //          .data
		.src_channel         (cmd_mux_006_src_channel),              //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),        //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),          //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src6_channel),               //          .channel
		.sink0_data          (cmd_demux_src6_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src6_ready),             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src6_valid),             //          .valid
		.sink1_channel       (cmd_demux_001_src6_channel),           //          .channel
		.sink1_data          (cmd_demux_001_src6_data),              //          .data
		.sink1_startofpacket (cmd_demux_001_src6_startofpacket),     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src6_endofpacket)        //          .endofpacket
	);

	cpu_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (clk_50_clk_clk),                       //       clk.clk
		.reset               (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                //          .valid
		.src_data            (cmd_mux_007_src_data),                 //          .data
		.src_channel         (cmd_mux_007_src_channel),              //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),        //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),          //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src7_channel),               //          .channel
		.sink0_data          (cmd_demux_src7_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src7_ready),             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src7_valid),             //          .valid
		.sink1_channel       (cmd_demux_001_src7_channel),           //          .channel
		.sink1_data          (cmd_demux_001_src7_data),              //          .data
		.sink1_startofpacket (cmd_demux_001_src7_startofpacket),     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src7_endofpacket)        //          .endofpacket
	);

	cpu_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (clk_50_clk_clk),                       //       clk.clk
		.reset               (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                //          .valid
		.src_data            (cmd_mux_008_src_data),                 //          .data
		.src_channel         (cmd_mux_008_src_channel),              //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),        //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),          //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src8_channel),               //          .channel
		.sink0_data          (cmd_demux_src8_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src8_ready),             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src8_valid),             //          .valid
		.sink1_channel       (cmd_demux_001_src8_channel),           //          .channel
		.sink1_data          (cmd_demux_001_src8_data),              //          .data
		.sink1_startofpacket (cmd_demux_001_src8_startofpacket),     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src8_endofpacket)        //          .endofpacket
	);

	cpu_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (clk_50_clk_clk),                       //       clk.clk
		.reset               (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                //          .valid
		.src_data            (cmd_mux_009_src_data),                 //          .data
		.src_channel         (cmd_mux_009_src_channel),              //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),        //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),          //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src9_channel),               //          .channel
		.sink0_data          (cmd_demux_src9_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src9_ready),             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src9_valid),             //          .valid
		.sink1_channel       (cmd_demux_001_src9_channel),           //          .channel
		.sink1_data          (cmd_demux_001_src9_data),              //          .data
		.sink1_startofpacket (cmd_demux_001_src9_startofpacket),     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src9_endofpacket)        //          .endofpacket
	);

	cpu_mm_interconnect_0_cmd_mux cmd_mux_010 (
		.clk                 (clk_50_clk_clk),                       //       clk.clk
		.reset               (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                //          .valid
		.src_data            (cmd_mux_010_src_data),                 //          .data
		.src_channel         (cmd_mux_010_src_channel),              //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),        //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),          //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                //          .valid
		.sink0_channel       (cmd_demux_src10_channel),              //          .channel
		.sink0_data          (cmd_demux_src10_data),                 //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket),          //          .endofpacket
		.sink1_ready         (cmd_demux_001_src10_ready),            //     sink1.ready
		.sink1_valid         (cmd_demux_001_src10_valid),            //          .valid
		.sink1_channel       (cmd_demux_001_src10_channel),          //          .channel
		.sink1_data          (cmd_demux_001_src10_data),             //          .data
		.sink1_startofpacket (cmd_demux_001_src10_startofpacket),    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src10_endofpacket)       //          .endofpacket
	);

	cpu_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (clk_50_clk_clk),                       //       clk.clk
		.reset               (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                //          .valid
		.src_data            (cmd_mux_011_src_data),                 //          .data
		.src_channel         (cmd_mux_011_src_channel),              //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),        //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),          //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                //          .valid
		.sink0_channel       (cmd_demux_src11_channel),              //          .channel
		.sink0_data          (cmd_demux_src11_data),                 //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket),          //          .endofpacket
		.sink1_ready         (cmd_demux_001_src11_ready),            //     sink1.ready
		.sink1_valid         (cmd_demux_001_src11_valid),            //          .valid
		.sink1_channel       (cmd_demux_001_src11_channel),          //          .channel
		.sink1_data          (cmd_demux_001_src11_data),             //          .data
		.sink1_startofpacket (cmd_demux_001_src11_startofpacket),    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src11_endofpacket)       //          .endofpacket
	);

	cpu_mm_interconnect_0_cmd_mux cmd_mux_012 (
		.clk                 (clk_50_clk_clk),                       //       clk.clk
		.reset               (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                //          .valid
		.src_data            (cmd_mux_012_src_data),                 //          .data
		.src_channel         (cmd_mux_012_src_channel),              //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),        //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),          //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                //          .valid
		.sink0_channel       (cmd_demux_src12_channel),              //          .channel
		.sink0_data          (cmd_demux_src12_data),                 //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket),          //          .endofpacket
		.sink1_ready         (cmd_demux_001_src12_ready),            //     sink1.ready
		.sink1_valid         (cmd_demux_001_src12_valid),            //          .valid
		.sink1_channel       (cmd_demux_001_src12_channel),          //          .channel
		.sink1_data          (cmd_demux_001_src12_data),             //          .data
		.sink1_startofpacket (cmd_demux_001_src12_startofpacket),    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src12_endofpacket)       //          .endofpacket
	);

	cpu_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_50_clk_clk),                       //       clk.clk
		.reset              (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                 //      sink.ready
		.sink_channel       (router_002_src_channel),               //          .channel
		.sink_data          (router_002_src_data),                  //          .data
		.sink_startofpacket (router_002_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),           //          .endofpacket
		.sink_valid         (router_002_src_valid),                 //          .valid
		.src0_ready         (rsp_demux_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_src0_data),                  //          .data
		.src0_channel       (rsp_demux_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),           //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                 //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                 //          .valid
		.src1_data          (rsp_demux_src1_data),                  //          .data
		.src1_channel       (rsp_demux_src1_channel),               //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)            //          .endofpacket
	);

	cpu_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (clk_50_clk_clk),                       //       clk.clk
		.reset              (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                 //      sink.ready
		.sink_channel       (router_003_src_channel),               //          .channel
		.sink_data          (router_003_src_data),                  //          .data
		.sink_startofpacket (router_003_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),           //          .endofpacket
		.sink_valid         (router_003_src_valid),                 //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),             //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),             //          .valid
		.src0_data          (rsp_demux_001_src0_data),              //          .data
		.src0_channel       (rsp_demux_001_src0_channel),           //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),     //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),       //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),             //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),             //          .valid
		.src1_data          (rsp_demux_001_src1_data),              //          .data
		.src1_channel       (rsp_demux_001_src1_channel),           //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),     //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)        //          .endofpacket
	);

	cpu_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (clk_50_clk_clk),                       //       clk.clk
		.reset              (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                 //      sink.ready
		.sink_channel       (router_004_src_channel),               //          .channel
		.sink_data          (router_004_src_data),                  //          .data
		.sink_startofpacket (router_004_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),           //          .endofpacket
		.sink_valid         (router_004_src_valid),                 //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),             //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),             //          .valid
		.src0_data          (rsp_demux_002_src0_data),              //          .data
		.src0_channel       (rsp_demux_002_src0_channel),           //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),     //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),       //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),             //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),             //          .valid
		.src1_data          (rsp_demux_002_src1_data),              //          .data
		.src1_channel       (rsp_demux_002_src1_channel),           //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),     //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)        //          .endofpacket
	);

	cpu_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (clk_50_clk_clk),                       //       clk.clk
		.reset              (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                 //      sink.ready
		.sink_channel       (router_005_src_channel),               //          .channel
		.sink_data          (router_005_src_data),                  //          .data
		.sink_startofpacket (router_005_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),           //          .endofpacket
		.sink_valid         (router_005_src_valid),                 //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),             //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),             //          .valid
		.src0_data          (rsp_demux_003_src0_data),              //          .data
		.src0_channel       (rsp_demux_003_src0_channel),           //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),     //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),       //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),             //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),             //          .valid
		.src1_data          (rsp_demux_003_src1_data),              //          .data
		.src1_channel       (rsp_demux_003_src1_channel),           //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),     //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)        //          .endofpacket
	);

	cpu_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (clk_50_clk_clk),                       //       clk.clk
		.reset              (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                 //      sink.ready
		.sink_channel       (router_006_src_channel),               //          .channel
		.sink_data          (router_006_src_data),                  //          .data
		.sink_startofpacket (router_006_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),           //          .endofpacket
		.sink_valid         (router_006_src_valid),                 //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),             //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),             //          .valid
		.src0_data          (rsp_demux_004_src0_data),              //          .data
		.src0_channel       (rsp_demux_004_src0_channel),           //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),     //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),       //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),             //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),             //          .valid
		.src1_data          (rsp_demux_004_src1_data),              //          .data
		.src1_channel       (rsp_demux_004_src1_channel),           //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),     //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)        //          .endofpacket
	);

	cpu_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (clk_50_clk_clk),                       //       clk.clk
		.reset              (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                 //      sink.ready
		.sink_channel       (router_007_src_channel),               //          .channel
		.sink_data          (router_007_src_data),                  //          .data
		.sink_startofpacket (router_007_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),           //          .endofpacket
		.sink_valid         (router_007_src_valid),                 //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),             //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),             //          .valid
		.src0_data          (rsp_demux_005_src0_data),              //          .data
		.src0_channel       (rsp_demux_005_src0_channel),           //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),     //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),       //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),             //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),             //          .valid
		.src1_data          (rsp_demux_005_src1_data),              //          .data
		.src1_channel       (rsp_demux_005_src1_channel),           //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),     //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)        //          .endofpacket
	);

	cpu_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (clk_50_clk_clk),                       //       clk.clk
		.reset              (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                 //      sink.ready
		.sink_channel       (router_008_src_channel),               //          .channel
		.sink_data          (router_008_src_data),                  //          .data
		.sink_startofpacket (router_008_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),           //          .endofpacket
		.sink_valid         (router_008_src_valid),                 //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),             //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),             //          .valid
		.src0_data          (rsp_demux_006_src0_data),              //          .data
		.src0_channel       (rsp_demux_006_src0_channel),           //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),     //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),       //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),             //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),             //          .valid
		.src1_data          (rsp_demux_006_src1_data),              //          .data
		.src1_channel       (rsp_demux_006_src1_channel),           //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),     //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)        //          .endofpacket
	);

	cpu_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (clk_50_clk_clk),                       //       clk.clk
		.reset              (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                 //      sink.ready
		.sink_channel       (router_009_src_channel),               //          .channel
		.sink_data          (router_009_src_data),                  //          .data
		.sink_startofpacket (router_009_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),           //          .endofpacket
		.sink_valid         (router_009_src_valid),                 //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),             //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),             //          .valid
		.src0_data          (rsp_demux_007_src0_data),              //          .data
		.src0_channel       (rsp_demux_007_src0_channel),           //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),     //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),       //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),             //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),             //          .valid
		.src1_data          (rsp_demux_007_src1_data),              //          .data
		.src1_channel       (rsp_demux_007_src1_channel),           //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),     //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)        //          .endofpacket
	);

	cpu_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (clk_50_clk_clk),                       //       clk.clk
		.reset              (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                 //      sink.ready
		.sink_channel       (router_010_src_channel),               //          .channel
		.sink_data          (router_010_src_data),                  //          .data
		.sink_startofpacket (router_010_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),           //          .endofpacket
		.sink_valid         (router_010_src_valid),                 //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),             //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),             //          .valid
		.src0_data          (rsp_demux_008_src0_data),              //          .data
		.src0_channel       (rsp_demux_008_src0_channel),           //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),     //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),       //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),             //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),             //          .valid
		.src1_data          (rsp_demux_008_src1_data),              //          .data
		.src1_channel       (rsp_demux_008_src1_channel),           //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),     //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)        //          .endofpacket
	);

	cpu_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (clk_50_clk_clk),                       //       clk.clk
		.reset              (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                 //      sink.ready
		.sink_channel       (router_011_src_channel),               //          .channel
		.sink_data          (router_011_src_data),                  //          .data
		.sink_startofpacket (router_011_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),           //          .endofpacket
		.sink_valid         (router_011_src_valid),                 //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),             //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),             //          .valid
		.src0_data          (rsp_demux_009_src0_data),              //          .data
		.src0_channel       (rsp_demux_009_src0_channel),           //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),     //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),       //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),             //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),             //          .valid
		.src1_data          (rsp_demux_009_src1_data),              //          .data
		.src1_channel       (rsp_demux_009_src1_channel),           //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),     //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket)        //          .endofpacket
	);

	cpu_mm_interconnect_0_rsp_demux rsp_demux_010 (
		.clk                (clk_50_clk_clk),                       //       clk.clk
		.reset              (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                 //      sink.ready
		.sink_channel       (router_012_src_channel),               //          .channel
		.sink_data          (router_012_src_data),                  //          .data
		.sink_startofpacket (router_012_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),           //          .endofpacket
		.sink_valid         (router_012_src_valid),                 //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),             //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),             //          .valid
		.src0_data          (rsp_demux_010_src0_data),              //          .data
		.src0_channel       (rsp_demux_010_src0_channel),           //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),     //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),       //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),             //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),             //          .valid
		.src1_data          (rsp_demux_010_src1_data),              //          .data
		.src1_channel       (rsp_demux_010_src1_channel),           //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),     //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket)        //          .endofpacket
	);

	cpu_mm_interconnect_0_rsp_demux rsp_demux_011 (
		.clk                (clk_50_clk_clk),                       //       clk.clk
		.reset              (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                 //      sink.ready
		.sink_channel       (router_013_src_channel),               //          .channel
		.sink_data          (router_013_src_data),                  //          .data
		.sink_startofpacket (router_013_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),           //          .endofpacket
		.sink_valid         (router_013_src_valid),                 //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),             //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),             //          .valid
		.src0_data          (rsp_demux_011_src0_data),              //          .data
		.src0_channel       (rsp_demux_011_src0_channel),           //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),     //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),       //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),             //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),             //          .valid
		.src1_data          (rsp_demux_011_src1_data),              //          .data
		.src1_channel       (rsp_demux_011_src1_channel),           //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),     //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket)        //          .endofpacket
	);

	cpu_mm_interconnect_0_rsp_demux rsp_demux_012 (
		.clk                (clk_50_clk_clk),                       //       clk.clk
		.reset              (sw_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                 //      sink.ready
		.sink_channel       (router_014_src_channel),               //          .channel
		.sink_data          (router_014_src_data),                  //          .data
		.sink_startofpacket (router_014_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),           //          .endofpacket
		.sink_valid         (router_014_src_valid),                 //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),             //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),             //          .valid
		.src0_data          (rsp_demux_012_src0_data),              //          .data
		.src0_channel       (rsp_demux_012_src0_channel),           //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),     //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket),       //          .endofpacket
		.src1_ready         (rsp_demux_012_src1_ready),             //      src1.ready
		.src1_valid         (rsp_demux_012_src1_valid),             //          .valid
		.src1_data          (rsp_demux_012_src1_data),              //          .data
		.src1_channel       (rsp_demux_012_src1_channel),           //          .channel
		.src1_startofpacket (rsp_demux_012_src1_startofpacket),     //          .startofpacket
		.src1_endofpacket   (rsp_demux_012_src1_endofpacket)        //          .endofpacket
	);

	cpu_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (clk_50_clk_clk),                                                      //       clk.clk
		.reset                (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                                   //       src.ready
		.src_valid            (rsp_mux_src_valid),                                                   //          .valid
		.src_data             (rsp_mux_src_data),                                                    //          .data
		.src_channel          (rsp_mux_src_channel),                                                 //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                                             //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                                                //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                                                //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                                              //          .channel
		.sink0_data           (rsp_demux_src0_data),                                                 //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                                          //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                                            //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                                            //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                                          //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                                             //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                                    //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                                      //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                                            //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                                            //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                                          //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                                             //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                                    //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                                      //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                                            //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                                            //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                                          //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                                             //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                                    //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                                      //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                                            //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                                            //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                                          //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                                             //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                                    //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                                      //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                                            //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                                            //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                                          //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                                             //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                                    //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                                      //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                                            //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                                            //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                                          //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                                             //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                                    //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                                      //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                                            //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                                            //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                                          //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                                             //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                                    //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                                      //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                                            //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                                            //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                                          //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                                             //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                                    //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                                      //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                                            //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                                            //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                                          //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                                             //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                                    //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                                      //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                                            //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                                            //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                                          //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                                             //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                                    //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                                      //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                                            //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                                            //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                                          //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                                             //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),                                    //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                                      //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                                            //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                                            //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                                          //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                                             //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),                                    //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket)                                       //          .endofpacket
	);

	cpu_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                  (clk_50_clk_clk),                                                      //       clk.clk
		.reset                (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                                               //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                                               //          .valid
		.src_data             (rsp_mux_001_src_data),                                                //          .data
		.src_channel          (rsp_mux_001_src_channel),                                             //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),                                         //          .endofpacket
		.sink0_ready          (rsp_demux_src1_ready),                                                //     sink0.ready
		.sink0_valid          (rsp_demux_src1_valid),                                                //          .valid
		.sink0_channel        (rsp_demux_src1_channel),                                              //          .channel
		.sink0_data           (rsp_demux_src1_data),                                                 //          .data
		.sink0_startofpacket  (rsp_demux_src1_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src1_endofpacket),                                          //          .endofpacket
		.sink1_ready          (rsp_demux_001_src1_ready),                                            //     sink1.ready
		.sink1_valid          (rsp_demux_001_src1_valid),                                            //          .valid
		.sink1_channel        (rsp_demux_001_src1_channel),                                          //          .channel
		.sink1_data           (rsp_demux_001_src1_data),                                             //          .data
		.sink1_startofpacket  (rsp_demux_001_src1_startofpacket),                                    //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src1_endofpacket),                                      //          .endofpacket
		.sink2_ready          (rsp_demux_002_src1_ready),                                            //     sink2.ready
		.sink2_valid          (rsp_demux_002_src1_valid),                                            //          .valid
		.sink2_channel        (rsp_demux_002_src1_channel),                                          //          .channel
		.sink2_data           (rsp_demux_002_src1_data),                                             //          .data
		.sink2_startofpacket  (rsp_demux_002_src1_startofpacket),                                    //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src1_endofpacket),                                      //          .endofpacket
		.sink3_ready          (rsp_demux_003_src1_ready),                                            //     sink3.ready
		.sink3_valid          (rsp_demux_003_src1_valid),                                            //          .valid
		.sink3_channel        (rsp_demux_003_src1_channel),                                          //          .channel
		.sink3_data           (rsp_demux_003_src1_data),                                             //          .data
		.sink3_startofpacket  (rsp_demux_003_src1_startofpacket),                                    //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src1_endofpacket),                                      //          .endofpacket
		.sink4_ready          (rsp_demux_004_src1_ready),                                            //     sink4.ready
		.sink4_valid          (rsp_demux_004_src1_valid),                                            //          .valid
		.sink4_channel        (rsp_demux_004_src1_channel),                                          //          .channel
		.sink4_data           (rsp_demux_004_src1_data),                                             //          .data
		.sink4_startofpacket  (rsp_demux_004_src1_startofpacket),                                    //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src1_endofpacket),                                      //          .endofpacket
		.sink5_ready          (rsp_demux_005_src1_ready),                                            //     sink5.ready
		.sink5_valid          (rsp_demux_005_src1_valid),                                            //          .valid
		.sink5_channel        (rsp_demux_005_src1_channel),                                          //          .channel
		.sink5_data           (rsp_demux_005_src1_data),                                             //          .data
		.sink5_startofpacket  (rsp_demux_005_src1_startofpacket),                                    //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src1_endofpacket),                                      //          .endofpacket
		.sink6_ready          (rsp_demux_006_src1_ready),                                            //     sink6.ready
		.sink6_valid          (rsp_demux_006_src1_valid),                                            //          .valid
		.sink6_channel        (rsp_demux_006_src1_channel),                                          //          .channel
		.sink6_data           (rsp_demux_006_src1_data),                                             //          .data
		.sink6_startofpacket  (rsp_demux_006_src1_startofpacket),                                    //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src1_endofpacket),                                      //          .endofpacket
		.sink7_ready          (rsp_demux_007_src1_ready),                                            //     sink7.ready
		.sink7_valid          (rsp_demux_007_src1_valid),                                            //          .valid
		.sink7_channel        (rsp_demux_007_src1_channel),                                          //          .channel
		.sink7_data           (rsp_demux_007_src1_data),                                             //          .data
		.sink7_startofpacket  (rsp_demux_007_src1_startofpacket),                                    //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src1_endofpacket),                                      //          .endofpacket
		.sink8_ready          (rsp_demux_008_src1_ready),                                            //     sink8.ready
		.sink8_valid          (rsp_demux_008_src1_valid),                                            //          .valid
		.sink8_channel        (rsp_demux_008_src1_channel),                                          //          .channel
		.sink8_data           (rsp_demux_008_src1_data),                                             //          .data
		.sink8_startofpacket  (rsp_demux_008_src1_startofpacket),                                    //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src1_endofpacket),                                      //          .endofpacket
		.sink9_ready          (rsp_demux_009_src1_ready),                                            //     sink9.ready
		.sink9_valid          (rsp_demux_009_src1_valid),                                            //          .valid
		.sink9_channel        (rsp_demux_009_src1_channel),                                          //          .channel
		.sink9_data           (rsp_demux_009_src1_data),                                             //          .data
		.sink9_startofpacket  (rsp_demux_009_src1_startofpacket),                                    //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src1_endofpacket),                                      //          .endofpacket
		.sink10_ready         (rsp_demux_010_src1_ready),                                            //    sink10.ready
		.sink10_valid         (rsp_demux_010_src1_valid),                                            //          .valid
		.sink10_channel       (rsp_demux_010_src1_channel),                                          //          .channel
		.sink10_data          (rsp_demux_010_src1_data),                                             //          .data
		.sink10_startofpacket (rsp_demux_010_src1_startofpacket),                                    //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src1_endofpacket),                                      //          .endofpacket
		.sink11_ready         (rsp_demux_011_src1_ready),                                            //    sink11.ready
		.sink11_valid         (rsp_demux_011_src1_valid),                                            //          .valid
		.sink11_channel       (rsp_demux_011_src1_channel),                                          //          .channel
		.sink11_data          (rsp_demux_011_src1_data),                                             //          .data
		.sink11_startofpacket (rsp_demux_011_src1_startofpacket),                                    //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src1_endofpacket),                                      //          .endofpacket
		.sink12_ready         (rsp_demux_012_src1_ready),                                            //    sink12.ready
		.sink12_valid         (rsp_demux_012_src1_valid),                                            //          .valid
		.sink12_channel       (rsp_demux_012_src1_channel),                                          //          .channel
		.sink12_data          (rsp_demux_012_src1_data),                                             //          .data
		.sink12_startofpacket (rsp_demux_012_src1_startofpacket),                                    //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src1_endofpacket)                                       //          .endofpacket
	);

	cpu_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_50_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (sw_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sw_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (sw_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (sw_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)         //         .error
	);

	cpu_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_50_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (sw_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (led_s1_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (led_s1_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (led_s1_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),     //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),    //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),    //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)     //         .error
	);

	cpu_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_50_clk_clk),                          // in_clk_0.clk
		.in_rst_0_reset (sw_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (pvcurrent_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (pvcurrent_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (pvcurrent_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)        //         .error
	);

	cpu_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_50_clk_clk),                          // in_clk_0.clk
		.in_rst_0_reset (sw_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (pvvoltage_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (pvvoltage_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (pvvoltage_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)        //         .error
	);

	cpu_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_50_clk_clk),                          // in_clk_0.clk
		.in_rst_0_reset (sw_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (bacurrent_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (bacurrent_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (bacurrent_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)        //         .error
	);

	cpu_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_50_clk_clk),                          // in_clk_0.clk
		.in_rst_0_reset (sw_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (bavoltage_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (bavoltage_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (bavoltage_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)        //         .error
	);

	cpu_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_50_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (sw_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (vgr_current_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (vgr_current_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (vgr_current_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)          //         .error
	);

	cpu_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_50_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (sw_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (vgs_current_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (vgs_current_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (vgs_current_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)          //         .error
	);

	cpu_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_50_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (sw_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (vgt_current_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (vgt_current_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (vgt_current_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)          //         .error
	);

	cpu_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_50_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (sw_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (vgr_voltage_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (vgr_voltage_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (vgr_voltage_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)          //         .error
	);

	cpu_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_50_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (sw_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (vgs_voltage_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (vgs_voltage_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (vgs_voltage_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)          //         .error
	);

	cpu_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_50_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (sw_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (vgt_voltage_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (vgt_voltage_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (vgt_voltage_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)          //         .error
	);

	cpu_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (clk_50_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (sw_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (phase_s1_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (phase_s1_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (phase_s1_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),     //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),    //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),    //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)     //         .error
	);

endmodule
