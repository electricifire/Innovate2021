#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'cpu' in
 * file './cpu.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'phase', class 'altera_avalon_pio'
 * The macros are prefixed with 'PHASE_'.
 * The prefix is the slave descriptor.
 */
#define PHASE_COMPONENT_TYPE altera_avalon_pio
#define PHASE_COMPONENT_NAME phase
#define PHASE_BASE 0x0
#define PHASE_SPAN 16
#define PHASE_END 0xf
#define PHASE_BIT_CLEARING_EDGE_REGISTER 0
#define PHASE_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PHASE_CAPTURE 0
#define PHASE_DATA_WIDTH 12
#define PHASE_DO_TEST_BENCH_WIRING 0
#define PHASE_DRIVEN_SIM_VALUE 0
#define PHASE_EDGE_TYPE NONE
#define PHASE_FREQ 50000000
#define PHASE_HAS_IN 1
#define PHASE_HAS_OUT 1
#define PHASE_HAS_TRI 0
#define PHASE_IRQ_TYPE NONE
#define PHASE_RESET_VALUE 0

/*
 * Macros for device 'VGT_voltage', class 'altera_avalon_pio'
 * The macros are prefixed with 'VGT_VOLTAGE_'.
 * The prefix is the slave descriptor.
 */
#define VGT_VOLTAGE_COMPONENT_TYPE altera_avalon_pio
#define VGT_VOLTAGE_COMPONENT_NAME VGT_voltage
#define VGT_VOLTAGE_BASE 0x10
#define VGT_VOLTAGE_SPAN 16
#define VGT_VOLTAGE_END 0x1f
#define VGT_VOLTAGE_BIT_CLEARING_EDGE_REGISTER 0
#define VGT_VOLTAGE_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VGT_VOLTAGE_CAPTURE 0
#define VGT_VOLTAGE_DATA_WIDTH 12
#define VGT_VOLTAGE_DO_TEST_BENCH_WIRING 0
#define VGT_VOLTAGE_DRIVEN_SIM_VALUE 0
#define VGT_VOLTAGE_EDGE_TYPE NONE
#define VGT_VOLTAGE_FREQ 50000000
#define VGT_VOLTAGE_HAS_IN 1
#define VGT_VOLTAGE_HAS_OUT 0
#define VGT_VOLTAGE_HAS_TRI 0
#define VGT_VOLTAGE_IRQ_TYPE NONE
#define VGT_VOLTAGE_RESET_VALUE 0

/*
 * Macros for device 'VGS_voltage', class 'altera_avalon_pio'
 * The macros are prefixed with 'VGS_VOLTAGE_'.
 * The prefix is the slave descriptor.
 */
#define VGS_VOLTAGE_COMPONENT_TYPE altera_avalon_pio
#define VGS_VOLTAGE_COMPONENT_NAME VGS_voltage
#define VGS_VOLTAGE_BASE 0x20
#define VGS_VOLTAGE_SPAN 16
#define VGS_VOLTAGE_END 0x2f
#define VGS_VOLTAGE_BIT_CLEARING_EDGE_REGISTER 0
#define VGS_VOLTAGE_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VGS_VOLTAGE_CAPTURE 0
#define VGS_VOLTAGE_DATA_WIDTH 12
#define VGS_VOLTAGE_DO_TEST_BENCH_WIRING 0
#define VGS_VOLTAGE_DRIVEN_SIM_VALUE 0
#define VGS_VOLTAGE_EDGE_TYPE NONE
#define VGS_VOLTAGE_FREQ 50000000
#define VGS_VOLTAGE_HAS_IN 1
#define VGS_VOLTAGE_HAS_OUT 0
#define VGS_VOLTAGE_HAS_TRI 0
#define VGS_VOLTAGE_IRQ_TYPE NONE
#define VGS_VOLTAGE_RESET_VALUE 0

/*
 * Macros for device 'VGR_voltage', class 'altera_avalon_pio'
 * The macros are prefixed with 'VGR_VOLTAGE_'.
 * The prefix is the slave descriptor.
 */
#define VGR_VOLTAGE_COMPONENT_TYPE altera_avalon_pio
#define VGR_VOLTAGE_COMPONENT_NAME VGR_voltage
#define VGR_VOLTAGE_BASE 0x30
#define VGR_VOLTAGE_SPAN 16
#define VGR_VOLTAGE_END 0x3f
#define VGR_VOLTAGE_BIT_CLEARING_EDGE_REGISTER 0
#define VGR_VOLTAGE_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VGR_VOLTAGE_CAPTURE 0
#define VGR_VOLTAGE_DATA_WIDTH 12
#define VGR_VOLTAGE_DO_TEST_BENCH_WIRING 0
#define VGR_VOLTAGE_DRIVEN_SIM_VALUE 0
#define VGR_VOLTAGE_EDGE_TYPE NONE
#define VGR_VOLTAGE_FREQ 50000000
#define VGR_VOLTAGE_HAS_IN 1
#define VGR_VOLTAGE_HAS_OUT 0
#define VGR_VOLTAGE_HAS_TRI 0
#define VGR_VOLTAGE_IRQ_TYPE NONE
#define VGR_VOLTAGE_RESET_VALUE 0

/*
 * Macros for device 'VGT_current', class 'altera_avalon_pio'
 * The macros are prefixed with 'VGT_CURRENT_'.
 * The prefix is the slave descriptor.
 */
#define VGT_CURRENT_COMPONENT_TYPE altera_avalon_pio
#define VGT_CURRENT_COMPONENT_NAME VGT_current
#define VGT_CURRENT_BASE 0x40
#define VGT_CURRENT_SPAN 16
#define VGT_CURRENT_END 0x4f
#define VGT_CURRENT_BIT_CLEARING_EDGE_REGISTER 0
#define VGT_CURRENT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VGT_CURRENT_CAPTURE 0
#define VGT_CURRENT_DATA_WIDTH 12
#define VGT_CURRENT_DO_TEST_BENCH_WIRING 0
#define VGT_CURRENT_DRIVEN_SIM_VALUE 0
#define VGT_CURRENT_EDGE_TYPE NONE
#define VGT_CURRENT_FREQ 50000000
#define VGT_CURRENT_HAS_IN 1
#define VGT_CURRENT_HAS_OUT 0
#define VGT_CURRENT_HAS_TRI 0
#define VGT_CURRENT_IRQ_TYPE NONE
#define VGT_CURRENT_RESET_VALUE 0

/*
 * Macros for device 'VGS_current', class 'altera_avalon_pio'
 * The macros are prefixed with 'VGS_CURRENT_'.
 * The prefix is the slave descriptor.
 */
#define VGS_CURRENT_COMPONENT_TYPE altera_avalon_pio
#define VGS_CURRENT_COMPONENT_NAME VGS_current
#define VGS_CURRENT_BASE 0x50
#define VGS_CURRENT_SPAN 16
#define VGS_CURRENT_END 0x5f
#define VGS_CURRENT_BIT_CLEARING_EDGE_REGISTER 0
#define VGS_CURRENT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VGS_CURRENT_CAPTURE 0
#define VGS_CURRENT_DATA_WIDTH 12
#define VGS_CURRENT_DO_TEST_BENCH_WIRING 0
#define VGS_CURRENT_DRIVEN_SIM_VALUE 0
#define VGS_CURRENT_EDGE_TYPE NONE
#define VGS_CURRENT_FREQ 50000000
#define VGS_CURRENT_HAS_IN 1
#define VGS_CURRENT_HAS_OUT 0
#define VGS_CURRENT_HAS_TRI 0
#define VGS_CURRENT_IRQ_TYPE NONE
#define VGS_CURRENT_RESET_VALUE 0

/*
 * Macros for device 'VGR_current', class 'altera_avalon_pio'
 * The macros are prefixed with 'VGR_CURRENT_'.
 * The prefix is the slave descriptor.
 */
#define VGR_CURRENT_COMPONENT_TYPE altera_avalon_pio
#define VGR_CURRENT_COMPONENT_NAME VGR_current
#define VGR_CURRENT_BASE 0x60
#define VGR_CURRENT_SPAN 16
#define VGR_CURRENT_END 0x6f
#define VGR_CURRENT_BIT_CLEARING_EDGE_REGISTER 0
#define VGR_CURRENT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VGR_CURRENT_CAPTURE 0
#define VGR_CURRENT_DATA_WIDTH 12
#define VGR_CURRENT_DO_TEST_BENCH_WIRING 0
#define VGR_CURRENT_DRIVEN_SIM_VALUE 0
#define VGR_CURRENT_EDGE_TYPE NONE
#define VGR_CURRENT_FREQ 50000000
#define VGR_CURRENT_HAS_IN 1
#define VGR_CURRENT_HAS_OUT 0
#define VGR_CURRENT_HAS_TRI 0
#define VGR_CURRENT_IRQ_TYPE NONE
#define VGR_CURRENT_RESET_VALUE 0

/*
 * Macros for device 'BAvoltage', class 'altera_avalon_pio'
 * The macros are prefixed with 'BAVOLTAGE_'.
 * The prefix is the slave descriptor.
 */
#define BAVOLTAGE_COMPONENT_TYPE altera_avalon_pio
#define BAVOLTAGE_COMPONENT_NAME BAvoltage
#define BAVOLTAGE_BASE 0x70
#define BAVOLTAGE_SPAN 16
#define BAVOLTAGE_END 0x7f
#define BAVOLTAGE_BIT_CLEARING_EDGE_REGISTER 0
#define BAVOLTAGE_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BAVOLTAGE_CAPTURE 0
#define BAVOLTAGE_DATA_WIDTH 12
#define BAVOLTAGE_DO_TEST_BENCH_WIRING 0
#define BAVOLTAGE_DRIVEN_SIM_VALUE 0
#define BAVOLTAGE_EDGE_TYPE NONE
#define BAVOLTAGE_FREQ 50000000
#define BAVOLTAGE_HAS_IN 1
#define BAVOLTAGE_HAS_OUT 0
#define BAVOLTAGE_HAS_TRI 0
#define BAVOLTAGE_IRQ_TYPE NONE
#define BAVOLTAGE_RESET_VALUE 0

/*
 * Macros for device 'BAcurrent', class 'altera_avalon_pio'
 * The macros are prefixed with 'BACURRENT_'.
 * The prefix is the slave descriptor.
 */
#define BACURRENT_COMPONENT_TYPE altera_avalon_pio
#define BACURRENT_COMPONENT_NAME BAcurrent
#define BACURRENT_BASE 0x80
#define BACURRENT_SPAN 16
#define BACURRENT_END 0x8f
#define BACURRENT_BIT_CLEARING_EDGE_REGISTER 0
#define BACURRENT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BACURRENT_CAPTURE 0
#define BACURRENT_DATA_WIDTH 12
#define BACURRENT_DO_TEST_BENCH_WIRING 0
#define BACURRENT_DRIVEN_SIM_VALUE 0
#define BACURRENT_EDGE_TYPE NONE
#define BACURRENT_FREQ 50000000
#define BACURRENT_HAS_IN 1
#define BACURRENT_HAS_OUT 0
#define BACURRENT_HAS_TRI 0
#define BACURRENT_IRQ_TYPE NONE
#define BACURRENT_RESET_VALUE 0

/*
 * Macros for device 'PVvoltage', class 'altera_avalon_pio'
 * The macros are prefixed with 'PVVOLTAGE_'.
 * The prefix is the slave descriptor.
 */
#define PVVOLTAGE_COMPONENT_TYPE altera_avalon_pio
#define PVVOLTAGE_COMPONENT_NAME PVvoltage
#define PVVOLTAGE_BASE 0x90
#define PVVOLTAGE_SPAN 16
#define PVVOLTAGE_END 0x9f
#define PVVOLTAGE_BIT_CLEARING_EDGE_REGISTER 0
#define PVVOLTAGE_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PVVOLTAGE_CAPTURE 0
#define PVVOLTAGE_DATA_WIDTH 12
#define PVVOLTAGE_DO_TEST_BENCH_WIRING 0
#define PVVOLTAGE_DRIVEN_SIM_VALUE 0
#define PVVOLTAGE_EDGE_TYPE NONE
#define PVVOLTAGE_FREQ 50000000
#define PVVOLTAGE_HAS_IN 1
#define PVVOLTAGE_HAS_OUT 0
#define PVVOLTAGE_HAS_TRI 0
#define PVVOLTAGE_IRQ_TYPE NONE
#define PVVOLTAGE_RESET_VALUE 0

/*
 * Macros for device 'PVcurrent', class 'altera_avalon_pio'
 * The macros are prefixed with 'PVCURRENT_'.
 * The prefix is the slave descriptor.
 */
#define PVCURRENT_COMPONENT_TYPE altera_avalon_pio
#define PVCURRENT_COMPONENT_NAME PVcurrent
#define PVCURRENT_BASE 0xa0
#define PVCURRENT_SPAN 16
#define PVCURRENT_END 0xaf
#define PVCURRENT_BIT_CLEARING_EDGE_REGISTER 0
#define PVCURRENT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PVCURRENT_CAPTURE 0
#define PVCURRENT_DATA_WIDTH 12
#define PVCURRENT_DO_TEST_BENCH_WIRING 0
#define PVCURRENT_DRIVEN_SIM_VALUE 0
#define PVCURRENT_EDGE_TYPE NONE
#define PVCURRENT_FREQ 50000000
#define PVCURRENT_HAS_IN 1
#define PVCURRENT_HAS_OUT 0
#define PVCURRENT_HAS_TRI 0
#define PVCURRENT_IRQ_TYPE NONE
#define PVCURRENT_RESET_VALUE 0

/*
 * Macros for device 'led', class 'altera_avalon_pio'
 * The macros are prefixed with 'LED_'.
 * The prefix is the slave descriptor.
 */
#define LED_COMPONENT_TYPE altera_avalon_pio
#define LED_COMPONENT_NAME led
#define LED_BASE 0xb0
#define LED_SPAN 16
#define LED_END 0xbf
#define LED_BIT_CLEARING_EDGE_REGISTER 0
#define LED_BIT_MODIFYING_OUTPUT_REGISTER 0
#define LED_CAPTURE 0
#define LED_DATA_WIDTH 3
#define LED_DO_TEST_BENCH_WIRING 0
#define LED_DRIVEN_SIM_VALUE 0
#define LED_EDGE_TYPE NONE
#define LED_FREQ 50000000
#define LED_HAS_IN 0
#define LED_HAS_OUT 1
#define LED_HAS_TRI 0
#define LED_IRQ_TYPE NONE
#define LED_RESET_VALUE 0

/*
 * Macros for device 'sw', class 'altera_avalon_pio'
 * The macros are prefixed with 'SW_'.
 * The prefix is the slave descriptor.
 */
#define SW_COMPONENT_TYPE altera_avalon_pio
#define SW_COMPONENT_NAME sw
#define SW_BASE 0xc0
#define SW_SPAN 16
#define SW_END 0xcf
#define SW_BIT_CLEARING_EDGE_REGISTER 0
#define SW_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SW_CAPTURE 0
#define SW_DATA_WIDTH 3
#define SW_DO_TEST_BENCH_WIRING 0
#define SW_DRIVEN_SIM_VALUE 0
#define SW_EDGE_TYPE NONE
#define SW_FREQ 50000000
#define SW_HAS_IN 1
#define SW_HAS_OUT 0
#define SW_HAS_TRI 0
#define SW_IRQ_TYPE NONE
#define SW_RESET_VALUE 0


#endif /* _ALTERA_HPS_0_H_ */
